;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2023 Hex-Rays, <support@hex-rays.com>           |
; |                Licensed to: <error retrieving user info>                |
; +-------------------------------------------------------------------------+
;
; Input MD5    : 1FAE0EF46830D5A6ED0FBDB43B8A8FAD
; Input CRC32  : CB036015
; ---------------------------------------------------------------------------
; Processor       : z80 []
; Target assembler: Zilog Macro Assembler
; ===========================================================================
; Segment type: Pure code
; Main segment
; =============== S U B R O U T I N E =======================================

STACK EQU $1FFF

start:                                  ; CODE XREF: RAM:NMInt↓j
                di
                im      1
                jp      InitDriver
; ---------------------------------------------------------------------------
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop                    
; ---------------------------------------------------------------------------

VInt:
                di
                in      a, (0BFh)       ; Master System leftover ...
                push    af
                ex      af, af'
                push    af
                push    bc
                push    de
                push    hl
                push    iy
                push    ix
                call    WaitABit
                call    UpdateAll
                pop     ix
                pop     iy
                pop     hl
                pop     de
                pop     bc
                pop     af
                ex      af, af'
                pop     af
                ei
                ret

; =============== S U B R O U T I N E =======================================


WaitABit:                               ; CODE XREF: RAM:0045↑p
                ld      bc, 1E0h

loc_5A:                                 ; CODE XREF: WaitABit+8↓j
                push    hl
                pop     hl
                dec     bc
                ld      a, c
                or      a
                jr      nz, loc_5A
                ret
; End of function WaitABit

; ---------------------------------------------------------------------------
                db 0, 0, 0
                db 0                    ; DATA XREF: ResetFMChip↓o
; ---------------------------------------------------------------------------

NMInt:                                  ; non-maskable Interrupts are unused on the MD's Z80
                jp      start
; ---------------------------------------------------------------------------

InitDriver:                             ; CODE XREF: RAM:0003↑j
                ld      sp, STACK
                xor     a
                ld      hl, $1D05
                ld      de, $1D06
                ld      bc, 2F9h
                ld      (hl), a
                ldir                    ; clear track memory
                xor     a               ; switch to Bank 010000
                ld      (6000h), a      ; Bank bits written: 002h
                ld      a, 1
                ld      (6000h), a
                xor     a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                call    SilencePSG
                ld      a, 2Fh          ; Registers 2D/2F are Prescaler registers on other OPN chips,
                ld      (4000h), a      ; so this was probably written with 2xYM2203 in mind.
                ld      (4002h), a
                call    ResetFMChip
                ld      a, 2Dh
                ld      (4000h), a
                ld      (4002h), a
                ei

loc_AF:                                 ; CODE XREF: RAM:00B0↓j
                nop
                jp      loc_AF
; ---------------------------------------------------------------------------
                ld      ($1D03), a
                ret

; =============== S U B R O U T I N E =======================================


ResetFMChip:                            ; CODE XREF: RAM:00A3↑p
                ld      ix, $65
                call    SilenceFM
                ld      a, 40h
                ld      ($1D10), a  ; enable FM 3 Special Mode
                ld      c, 27h
                call    WriteFMI
                ret
; End of function ResetFMChip


; =============== S U B R O U T I N E =======================================


DoPause_Exit:                           ; CODE XREF: UpdateAll+3↓p
                ld      a, ($1D08)  ; 1D08 = Pause Mode
                or      a
                ret     z               ; 00 - unpaused
                call    SilenceAll      ; 01-FF - paused, so mute everything...
                pop     hl              ; ... and make it skip the sound update
                ret
; End of function DoPause_Exit


; =============== S U B R O U T I N E =======================================


DoUnpause:                              ; CODE XREF: UpdateAll↓p
                ld      a, ($1D08)
                or      a
                ret     z
                ld      a, ($1D09)
                or      a
                ret     z
                xor     a
                ld      ($1D08), a
                ld      ($1D09), a
                call    UnpauseOrStop
                ret
; End of function DoUnpause


; =============== S U B R O U T I N E =======================================


DoFading:                               ; CODE XREF: UpdateAll+C↓p
                ld      a, ($1D0C)  ; load remaining Fading Steps
                or      a
                ret     z               ; reached 0 - return
                ld      a, ($1D0D)  ; 1D0D - Timeout Counter
                dec     a
                jr      z, ApplyFading  ; reached 0 - apply fading
                ld      ($1D0D), a  ; else just write back
                ret
; ---------------------------------------------------------------------------

ApplyFading:                            ; CODE XREF: DoFading+9↑j
                ld      a, 2
                ld      ($1D0D), a  ; 1D0D (Counter) = 2 frames until next execution
                ld      a, ($1D0C)
                dec     a               ; decrement Fading Steps
                ld      ($1D0C), a
                jp      z, StopAllSound
                ld      hl,  $1D46+8
                ld      de, 30h
                ld      b, 6

loc_10E:                                ; CODE XREF: DoFading+2E↓j
                ld      a, (hl)
                inc     a
                cp      7Fh
                jr      nc, loc_115
                ld      (hl), a

loc_115:                                ; CODE XREF: DoFading+2A↑j
                add     hl, de
                djnz    loc_10E
                ld      iy, $1D46   ; 1D46 - Music Tracks
                ld      de, 30h
                ld      b, 6

loc_121:                                ; CODE XREF: DoFading+58↓j
                ld      a, (iy+1)
                cp      2
                jp      z, loc_13E      ; skip FM 3 (drum channel)
                ld      a, (iy+17h)
                and     7
                cp      4
                jp      z, WriteVolOp_8
                jp      c, WriteVolOp_C
                cp      7
                jp      c, WriteVolOp_4
                jp      WriteVolOp_0
; ---------------------------------------------------------------------------

loc_13E:                                ; CODE XREF: DoFading+3E↑j
                                        ; DoFading+A9↓j
                add     iy, de
                djnz    loc_121
                ret
; ---------------------------------------------------------------------------

WriteVolOp_0:                           ; CODE XREF: DoFading+53↑j
                call    GetFMVolReg_F
                ld      c, a
                ld      a, (iy+8)
                add     a, (iy+18h)
                cp      7Fh
                jp      nc, FadeCancel
                call    WriteFMIorII_2

WriteVolOp_4:                           ; CODE XREF: DoFading+50↑j
                call    GetFMVolReg_F
                add     a, 4
                ld      c, a
                ld      a, (iy+8)
                add     a, (iy+1Ah)
                cp      7Fh
                jp      nc, FadeCancel
                call    WriteFMIorII_2

WriteVolOp_8:                           ; CODE XREF: DoFading+48↑j
                call    GetFMVolReg_F
                add     a, 8
                ld      c, a
                ld      a, (iy+8)
                add     a, (iy+19h)
                cp      7Fh
                jp      nc, FadeCancel
                call    WriteFMIorII_2

WriteVolOp_C:                           ; CODE XREF: DoFading+4B↑j
                call    GetFMVolReg_F
                add     a, 0Ch
                ld      c, a
                ld      a, (iy+8)
                add     a, (iy+1Bh)
                cp      7Fh
                jp      nc, FadeCancel
                call    WriteFMIorII_2
                jp      loc_13E
; ---------------------------------------------------------------------------

FadeCancel:                             ; CODE XREF: DoFading+67↑j
                                        ; DoFading+7B↑j ...
                xor     a
                ld      ($1D0C), a  ; 1D0C (Fade Steps) = 0
                ld      ($1D0D), a  ; 1D0D (Fade Timeout) = 0
                jp      StopAllSound
; End of function DoFading


; =============== S U B R O U T I N E =======================================


GetFMVolReg_F:                          ; CODE XREF: DoFading:WriteVolOp_0↑p
                                        ; DoFading:WriteVolOp_4↑p ...
                ld      a, (iy+1)
                and     3
                add     a, 40h
                ret
; End of function GetFMVolReg_F


; =============== S U B R O U T I N E =======================================


WriteFMIorII_2:                         ; CODE XREF: DoFading+6A↑p
                                        ; DoFading+7E↑p ...
                bit     2, (iy+1)
                jr      nz, loc_1B0
                call    WriteFMIMain
                ret
; ---------------------------------------------------------------------------

loc_1B0:                                ; CODE XREF: WriteFMIorII_2+4↑j
                call    WriteFMII
                ret
; End of function WriteFMIorII_2

; ---------------------------------------------------------------------------

FadeOutMusic:                           ; DATA XREF: RAM:CmdPtrTable↓o
                ld      a, 0E0h         ; Number of fading steps: 60h
                ld      ($1D0C), a
                ld      a, 2            ; Frames per Step
                ld      ($1D0D), a
                xor     a
                ld      ($1DA6), a  ; Music Track FM 3
                ld      ($1E36), a  ; Music Track FM 6
                ld      ($1E66), a  ; Special SFX Track FM 5
                ld      ($1E96), a  ; Special SFX Track FM 6
                ld      ($1EC6), a  ; SFX Track FM 3
                ld      ($1EF6), a  ; SFX Track FM 5
                ld      ($1F26), a  ; SFX Track FM 6
                call    SilencePSG
                jp      ClearSoundID

; =============== S U B R O U T I N E =======================================


DoTempo:                                ; CODE XREF: UpdateAll+6↓p
                ld      hl, $1D01   ; 1D01 = Tempo Timeout
                ld      a, (hl)
                or      a
                ret     z               ; Tempo 00 = never delayed
                dec     (hl)            ; subtract 1
                ret     nz              ; reached 00 - continue and delay all tracks
                ld      a, ($1D02)  ; load initial Tempo (1D02)
                ld      (hl), a
                ld      hl,  $1D46+0Ah ; 1C46 (Drum Track) + 0A (Note Timeout)
                ld      de, 30h
                ld      b, 6

loc_1EE:                                ; CODE XREF: DoTempo+16↓j
                inc     (hl)
                add     hl, de
                djnz    loc_1EE
                ret
; End of function DoTempo

; ---------------------------------------------------------------------------
                set     2, (hl)
                ret

; =============== S U B R O U T I N E =======================================


SpcSFX5_Check:                          ; CODE XREF: UpdateAll+12↓p
                ld      hl, $1E66   ; Special SFX Track FM 5
                bit     7, (hl)
                ret     z
                ld      a, ($1EF6)  ; SFX Track FM 5
                or      a
                jp      m, loc_209
                ld      hl, $1E06   ; Music Track FM 5
                set     2, (hl)         ; set 'overridden' bit
                ret
; ---------------------------------------------------------------------------

loc_209:                                ; CODE XREF: SpcSFX5_Check+A↑j
                set     2, (hl)
                ret
; End of function SpcSFX5_Check


; =============== S U B R O U T I N E =======================================


SpcSFX6_Check:                          ; CODE XREF: UpdateAll+15↓p
                ld      hl, $1E96   ; Special SFX Track FM 6
                bit     7, (hl)
                ret     z
                ld      a, ($1F26)  ; SFX Track FM 6
                or      a
                jp      m, loc_21F
                ld      hl, $1E36   ; Music Track FM 6
                set     2, (hl)
                ret
; ---------------------------------------------------------------------------

loc_21F:                                ; CODE XREF: SpcSFX6_Check+A↑j
                set     2, (hl)
                ret
; End of function SpcSFX6_Check


; =============== S U B R O U T I N E =======================================


DoSoundQueue:                           ; CODE XREF: UpdateAll+9↓p
                ld      de, $1D04
                call    DoOneSndQueue
                ld      de, $1D05
                call    DoOneSndQueue
                ld      de, $1D06
; End of function DoSoundQueue


; =============== S U B R O U T I N E =======================================


DoOneSndQueue:                          ; CODE XREF: DoSoundQueue+3↑p
                                        ; DoSoundQueue+9↑p
                ld      a, (de)
                bit     7, a
                ret     z
                and     7Fh
                ld      hl, SndPriorities
                dec     a
                ld      b, 0
                ld      c, a
                add     hl, bc
                bit     7, (hl)
                jr      z, loc_251
                ld      a, (de)
                ld      ($1D03), a
                xor     a
                ld      hl, $1D04
                ld      (hl), a
                inc     hl
                ld      (hl), a
                inc     hl
                ld      (hl), a
                ret
; ---------------------------------------------------------------------------

loc_251:                                ; CODE XREF: DoOneSndQueue+10↑j
                ld      a, ($1D0A)  ; get old Sound Priority
                cp      (hl)            ; compare old and new Priority
                jr      z, loc_259
                jr      nc, loc_261     ; old > new Priority -> jump and ignore

loc_259:                                ; CODE XREF: DoOneSndQueue+24↑j
                ld      a, (de)
                ld      ($1D03), a  ; put into PlaySound ID slot
                ld      a, (hl)
                ld      ($1D0A), a  ; save new priority

loc_261:                                ; CODE XREF: DoOneSndQueue+26↑j
                xor     a
                ld      (de), a
                ret
; End of function DoOneSndQueue


; =============== S U B R O U T I N E =======================================


UpdateAll:                              ; CODE XREF: RAM:0048↑p
                call    DoUnpause       ; 1C08 = 01, 1C09 = 00 - pause
                call    DoPause_Exit    ; 1C08 = 01, 1C09 = 01 - unpause
                call    DoTempo
                call    DoSoundQueue
                call    DoFading
                call    PlaySoundID
                call    SpcSFX5_Check
                call    SpcSFX6_Check
                ld      ix, $1D46   ; 1D46 - Music Tracks
                ld      b, 0Ch

loc_282:                                ; CODE XREF: UpdateAll+31↓j
                push    bc
                ld      a, 0Ah
                cp      b
                jr      z, loc_298      ; FM 3 (Drum Track) - jump
                bit     7, (ix+0)
                call    nz, UpdateTrack

loc_28F:                                ; CODE XREF: UpdateAll+3B↓j
                ld      de, 30h
                add     ix, de
                pop     bc
                djnz    loc_282
                ret
; ---------------------------------------------------------------------------

loc_298:                                ; CODE XREF: UpdateAll+22↑j
                bit     7, (ix+0)
                call    nz, DrumUpdateTrack
                jr      loc_28F
; End of function UpdateAll


; =============== S U B R O U T I N E =======================================


DrumUpdateTrack:                        ; CODE XREF: UpdateAll+38↑p

; FUNCTION CHUNK AT 0477 SIZE 00000006 BYTES
; FUNCTION CHUNK AT 0A35 SIZE 0000000A BYTES

                bit     3, (ix+1)       ; FM 3 in Normal Mode? (Channel Bits 0Ah)
                jp      nz, UpdateTrack ; yes - do normal update
                inc     (ix+0Bh)
                ld      a, (ix+0Ah)
                sub     (ix+0Bh)
                jp      z, DrumUpdate_Proc
                call    DrumUpdate_Upd
                ret
; ---------------------------------------------------------------------------

DrumUpdate_Proc:                        ; CODE XREF: DrumUpdateTrack+10↑j
                bit     2, (ix+0)
                call    z, DoNoteOff    ; 'overridden' bit not set - turn note off
                ld      e, (ix+3)
                ld      d, (ix+4)

loc_2C5:                                ; CODE XREF: RAM:047E↓j
                ld      a, (de)
                ex      af, af'
                ld      a, (de)
                ex      af, af'
                inc     de
                cp      0E0h
                jp      nc, cfHandler_Drum
                bit     3, (ix+1)       ; FM 3 Drum Mode?
                jp      z, loc_2DC
                call    TrkUpdPrc_Note
                jp      loc_597         ; continue by jumping into UpdateTrack
; ---------------------------------------------------------------------------

loc_2DC:                                ; CODE XREF: DrumUpdateTrack+32↑j
                cp      7Fh
                jp      nc, GetNote_Drum ; 80-DF - Drum Note
                ld      a, (ix+10h)
                bit     2, (ix+0)
                jp      z, GetNote_Drum
                ex      af, af'
                jp      SetDuration
; ---------------------------------------------------------------------------

GetNote_Drum:                           ; CODE XREF: DrumUpdateTrack+3D↑j
                                        ; DrumUpdateTrack+47↑j
                bit     2, (ix+0)
                jp      nz, loc_7D3     ; if overridden by SFX, finish track processing the normal way
                cp      80h
                jp      nz, loc_309
                push    af              ; 80 - mute drum channel
                push    hl
                push    bc
                ld      hl, Regs_MuteChn
                ld      b, 2
                call    WriteRegI_Loop
                pop     bc
                pop     hl
                pop     af

loc_309:                                ; CODE XREF: DrumUpdateTrack+57↑j
                bit     3, a
                ld      (ix+10h), a
                jp      nz, LoadDrum_Op12a
                ld      a, (ix+10h)
                bit     0, a
                call    nz, LoadDrum_Op12b

loc_319:                                ; CODE XREF: DrumUpdateTrack+AF↓j
                ld      a, (ix+10h)
                bit     2, a
                call    nz, LoadDrum_Op34
                ex      af, af'
                cp      80h
                jp      c, SetDuration
                ex      af, af'
                jp      loc_7D3         ; now finish track processing the normal way
; ---------------------------------------------------------------------------

LoadDrum_Op12a:                         ; CODE XREF: DrumUpdateTrack+6D↑j
                push    bc
                push    de
                push    hl
                ld      hl, Drum3_Op12
                bit     5, a
                jr      z, loc_338
                ld      hl, Drum3_Op12

loc_338:                                ; CODE XREF: DrumUpdateTrack+92↑j
                ld      de, $1D26
                ld      bc, 0Ah
                ldir
                ld      b, 2
                ld      a, ($1D28)
                ld      h, a
                ld      a, ($1D27)
                ld      l, a
                call    SendFMIns
                pop     hl
                pop     de
                pop     bc
                jp      loc_319
; End of function DrumUpdateTrack


; =============== S U B R O U T I N E =======================================


LoadDrum_Op12b:                         ; CODE XREF: DrumUpdateTrack+75↑p
                push    bc
                push    de
                push    hl
                ld      hl, Drum4_Op12
                bit     5, a
                jr      z, loc_360
                ld      hl, Drum4_Op12

loc_360:                                ; CODE XREF: LoadDrum_Op12b+8↑j
                ld      de, $1D26
                ld      bc, 0Ah
                ldir
                ld      b, 2
                ld      a, ($1D28)
                ld      h, a
                ld      a, ($1D27)
                ld      l, a
                call    SendFMIns
                ld      a, ($1D24)
                ld      a, (ix+8)
                add     a, (ix+19h)
                ld      c, 4Ah
                call    WriteFMIMain
                pop     hl
                pop     de
                pop     bc
                ret
; End of function LoadDrum_Op12b


; =============== S U B R O U T I N E =======================================


LoadDrum_Op34:                          ; CODE XREF: DrumUpdateTrack+7D↑p
                push    bc
                push    de
                push    hl
                ld      hl, Drum1_Op34
                bit     4, a
                jr      z, loc_394
                ld      hl, Drum2_Op34

loc_394:                                ; CODE XREF: LoadDrum_Op34+8↑j
                ld      de, $1D36
                ld      bc, 0Ah
                ldir
                ld      b, 2
                ld      a, ($1D38)
                ld      h, a
                ld      a, ($1D37)
                ld      l, a
                call    SendFMIns
                bit     4, (ix+10h)
                jr      nz, RefreshDrumVol
                ld      a, (ix+8)
                add     a, (ix+1Bh)
                ld      c, 4Eh
                call    WriteFMIMain
                pop     hl
                pop     de
                pop     bc
                ret
; ---------------------------------------------------------------------------

RefreshDrumVol:                         ; CODE XREF: LoadDrum_Op34+26↑j
                ld      a, (ix+19h)
                add     a, (ix+8)
                ld      c, 4Ah
                call    WriteFMIMain
                ld      a, (ix+1Ah)
                add     a, (ix+8)
                ld      c, 46h
                call    WriteFMIMain
                ld      a, (ix+1Bh)
                add     a, (ix+8)
                ld      c, 4Eh
                call    WriteFMIMain
                pop     hl
                pop     de
                pop     bc
                ret
; End of function LoadDrum_Op34

; ---------------------------------------------------------------------------
Drum1_Op34:     db  0C0h
                dw  $443
                db  11h, 3Ah, 10h, 2Ah, 0, 0, 6
                                        ; DATA XREF: LoadDrum_Op34+3↑o
Drum2_Op34:     db  0C0h
                dw  $45E
                db  15h, 32h, 15h, 87h, 10h, 1, 6
                                        ; DATA XREF: LoadDrum_Op34+A↑o
Drum3_Op12:     db  0C0h
                dw  $40B
                db  15h, 4Ch, 15h, 87h, 0F8h, 0F0h, 6
                                        ; DATA XREF: DrumUpdateTrack+8D↑o
                                        ; DrumUpdateTrack+94↑o
Drum4_Op12:     db  0C0h
                dw  $428
                db  33h, 0E4h, 32h, 0, 0, 0, 4
                                        ; DATA XREF: LoadDrum_Op12b+3↑o
                                        ; LoadDrum_Op12b+A↑o
                db  30h, 73h            ; DATA XREF: RAM:Drum3_Op12↑o
                db  38h, 30h
                db  40h, 0Eh
                db  48h, 00h
                db  50h, 16h
                db  58h, 1Fh
                db  60h, 1Fh
                db  68h, 9Fh
                db  70h, 00h
                db  78h, 13h
                db  80h, 03h
                db  88h, 04h
                db 0B0h, 3Dh
                db 0B4h,0C0h
                db  83h
                db 0B0h, 34h            ; DATA XREF: RAM:Drum4_Op12↑o
                db  30h, 19h
                db  38h, 0Fh
                db  40h, 02h
                db  48h, 08h
                db  50h, 18h
                db  58h, 18h
                db  60h, 10h
                db  68h, 13h
                db  70h, 15h
                db  78h, 20h
                db  80h, 5Fh
                db  88h, 8Fh
                db  83h
                db 0B0h, 34h            ; DATA XREF: RAM:Drum1_Op34↑o
                db  34h, 71h
                db  3Ch, 18h
                db  44h, 09h
                db  4Ch, 00h
                db  54h, 1Fh
                db  5Ch, 1Fh
                db  64h, 13h
                db  6Ch, 13h
                db  74h, 15h
                db  7Ch, 17h
                db  84h, 24h
                db  8Ch,0A6h
                db  83h
                db  34h, 02h            ; DATA XREF: RAM:Drum2_Op34↑o
                db  3Ch, 02h
                db  44h, 01h
                db  4Ch, 0Ah
                db  54h, 1Fh
                db  5Ch, 1Fh
                db  64h, 8Fh
                db  6Ch, 9Fh
                db  74h,0D3h
                db  7Ch,0D0h
                db  84h, 18h
                db  8Ch, 08h
                db  83h
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DrumUpdateTrack

cfHandler_Drum:                         ; CODE XREF: DrumUpdateTrack+2B↑j
                ld      hl, cfReturn_Drum
                jp      loc_833
; END OF FUNCTION CHUNK FOR DrumUpdateTrack
; ---------------------------------------------------------------------------

cfReturn_Drum:                          ; DATA XREF: DrumUpdateTrack:cfHandler_Drum↑o
                inc     de
                jp      loc_2C5

; =============== S U B R O U T I N E =======================================


DrumUpdate_Upd:                         ; CODE XREF: DrumUpdateTrack+13↑p

; FUNCTION CHUNK AT 0573 SIZE 00000018 BYTES

                bit     2, (ix+0)
                ret     nz              ; track overridden - return
                ld      a, ($1D26)
                bit     7, a
                jp      z, loc_49B      ; Drum Track 1 inactive - skip
                ld      a, ($1D2F)
                dec     a
                ld      ($1D2F), a
                jp      z, StopDrumNote1
                call    SendFM3Frq_Op12

loc_49B:                                ; CODE XREF: DrumUpdate_Upd+A↑j
                ld      a, ($1D36)
                bit     7, a
                jp      z, loc_4B0      ; Drum Track 2 inactive - skip
                ld      a, ($1D3F)
                dec     a
                ld      ($1D3F), a
                jp      z, StopDrumNote2
                call    SendFM3Frq_Op34

loc_4B0:                                ; CODE XREF: DrumUpdate_Upd+1F↑j
                ld      a, ($1D26)
                bit     6, a
                call    nz, SendFM3Note_12
                ld      a, ($1D36)
                bit     6, a
                call    nz, SendFM3Note_34
                ret
; End of function DrumUpdate_Upd


; =============== S U B R O U T I N E =======================================


SendFM3Note_12:                         ; CODE XREF: DrumUpdate_Upd+34↑p
                ld      a, ($1D36)
                bit     6, a            ; Drum Track 2 also playing?
                jp      nz, DrumNoteOnBoth

DrumNoteOn1:
                ld      a, 32h
                ld      c, 28h
                call    WriteFMIMain
                ld      a, ($1D26)
                res     6, a
                ld      ($1D26), a
                ret
; End of function SendFM3Note_12


; =============== S U B R O U T I N E =======================================


SendFM3Note_34:                         ; CODE XREF: DrumUpdate_Upd+3C↑p
                ld      a, ($1D26)
                bit     6, a            ; Drum Track 1 also playing?
                jp      nz, DrumNoteOnBoth

DrumNoteOn2:
                ld      a, 0C2h
                ld      c, 28h
                call    WriteFMIMain
                ld      a, ($1D36)
                res     6, a
                ld      ($1D36), a
                ret
; ---------------------------------------------------------------------------

DrumNoteOnBoth:                         ; CODE XREF: SendFM3Note_12+5↑j
                                        ; SendFM3Note_34+5↑j
                ld      a, 0F2h
                ld      c, 28h
                call    WriteFMIMain
                ld      a, ($1D26)
                res     6, a
                ld      ($1D26), a
                ld      a, ($1D36)
                res     6, a
                ld      ($1D36), a
                ret
; End of function SendFM3Note_34


; =============== S U B R O U T I N E =======================================


SendFM3Frq_Op12:                        ; CODE XREF: DrumUpdate_Upd+17↑p
                ld      a, ($1D29)
                ld      c, 0ADh
                call    WriteFMIMain
                ld      a, ($1D2A)
                push    af
                ld      a, ($1D2D)
                ld      b, a
                pop     af
                add     a, b
                ld      ($1D2A), a
                ld      c, 0A9h
                call    WriteFMIMain
                ld      a, ($1D2B)
                ld      c, 0AEh
                call    WriteFMIMain
                ld      a, ($1D2C)
                push    af
                ld      a, ($1D2E)
                ld      b, a
                pop     af
                add     a, b
                ld      ($1D2C), a
                ld      c, 0AAh
                call    WriteFMIMain
                ret
; End of function SendFM3Frq_Op12


; =============== S U B R O U T I N E =======================================


SendFM3Frq_Op34:                        ; CODE XREF: DrumUpdate_Upd+2C↑p
                ld      a, ($1D39)
                ld      c, 0ACh
                call    WriteFMIMain
                ld      a, ($1D3A)
                push    af
                ld      a, ($1D3D)
                ld      b, a
                pop     af
                add     a, b
                ld      ($1D3A), a
                ld      c, 0A8h
                call    WriteFMIMain
                ld      a, ($1D3B)
                ld      c, 0A6h
                call    WriteFMIMain
                ld      a, ($1D3C)
                push    af
                ld      a, ($1D3E)
                ld      b, a
                pop     af
                add     a, b
                ld      ($1D3C), a
                ld      c, 0A2h
                call    WriteFMIMain
                ret
; End of function SendFM3Frq_Op34

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DrumUpdate_Upd

StopDrumNote1:                          ; CODE XREF: DrumUpdate_Upd+14↑j
                ld      a, ($1D26)
                res     7, a            ; disable Drum Track 1
                ld      ($1D26), a
                call    DoNoteOff
                ret
; ---------------------------------------------------------------------------

StopDrumNote2:                          ; CODE XREF: DrumUpdate_Upd+29↑j
                ld      a, ($1D36)
                res     7, a            ; disable Drum Track 2
                ld      ($1D36), a
                call    DoNoteOff
                ret
; END OF FUNCTION CHUNK FOR DrumUpdate_Upd

; =============== S U B R O U T I N E =======================================


UpdateTrack:                            ; CODE XREF: UpdateAll+28↑p
                                        ; DrumUpdateTrack+4↑j
                inc     (ix+0Bh)
                ld      a, (ix+0Ah)
                sub     (ix+0Bh)
                call    z, TrkUpdate_Proc

loc_597:                                ; CODE XREF: DrumUpdateTrack+38↑j
                ld      ($1D0E), a
                cp      80h             ; just started a new note?
                jp      z, loc_626      ; yes - skip
                bit     5, (ix+0)
                jp      z, loc_626      ; Pitch Slide disabled - skip
                bit     3, (ix+0)
                jp      nz, loc_61F     ; Raw Frequency mode - jump
                ld      a, (ix+11h)     ; DoPitchSlide - check Delta
                bit     7, a
                jr      z, loc_5EE      ; positive - jump
                add     a, (ix+0Eh)     ; negative delta
                jp      c, loc_5BD
                dec     (ix+0Fh)

loc_5BD:                                ; CODE XREF: UpdateTrack+2C↑j
                ld      (ix+0Eh), a
                ld      a, (ix+0Fh)
                and     7
                cp      2
                jp      nz, loc_626
                ld      a, (ix+0Eh)
                cp      46h
                jp      nc, loc_623
                sub     46h             ; Frequency < 246h (without octave bits)
                add     a, 8Ch          ; Frequency -= 5BAh (-800h+246h)
                ld      (ix+0Eh), a
                dec     (ix+0Fh)
                dec     (ix+0Fh)
                dec     (ix+0Fh)
                dec     (ix+0Fh)
                dec     (ix+0Fh)
                dec     (ix+0Fh)
                jp      loc_61F
; ---------------------------------------------------------------------------

loc_5EE:                                ; CODE XREF: UpdateTrack+27↑j
                add     a, (ix+0Eh)     ; add positive Delta to Frequency LSB
                jp      nc, loc_5F7
                inc     (ix+0Fh)        ; overflow - increment MSB

loc_5F7:                                ; CODE XREF: UpdateTrack+66↑j
                bit     2, (ix+0Fh)
                jp      z, loc_623
                cp      0D2h
                jp      c, loc_623
                sub     0D2h            ; Frequency > 4D2h (without octave bits)
                add     a, 69h          ; Frequency += 597h (+800h-269h)
                ld      (ix+0Eh), a
                inc     (ix+0Fh)
                inc     (ix+0Fh)
                inc     (ix+0Fh)
                inc     (ix+0Fh)
                inc     (ix+0Fh)
                inc     (ix+0Fh)
                jp      loc_61F

loc_61F:                                ; CODE XREF: UpdateTrack+1F↑j
                                        ; UpdateTrack+60↑j
                set     1, (ix+0)

loc_623:                                ; CODE XREF: UpdateTrack+44↑j
                                        ; UpdateTrack+70↑j ...
                ld      (ix+0Eh), a

loc_626:                                ; CODE XREF: UpdateTrack+11↑j
                                        ; UpdateTrack+18↑j ...
                bit     2, (ix+0)
                ret     nz
                ld      a, (ix+13h)
                cp      1Fh
                ret     z
                ld      a, ($1D0E)
                bit     3, (ix+0)
                jr      z, loc_640
                bit     1, (ix+0)
                jr      nz, loc_644

loc_640:                                ; CODE XREF: UpdateTrack+AD↑j
                or      a
                jp      z, DoNoteOff

loc_644:                                ; CODE XREF: UpdateTrack+B3↑j
                or      a
                jp      m, loc_659
                bit     7, (ix+14h)
                ret     nz
                ld      a, (ix+6)
                dec     a
                jp      p, loc_65D
                bit     5, (ix+0)
                ret     z

loc_659:                                ; CODE XREF: UpdateTrack+BA↑j
                ld      a, (ix+6)
                dec     a

loc_65D:                                ; CODE XREF: UpdateTrack+C6↑j
                ld      l, (ix+0Eh)
                ld      h, (ix+0Fh)
                jp      m, loc_677
                bit     0, (ix+0)
                jp      loc_677
; ---------------------------------------------------------------------------
                ex      de, hl
                ld      hl, (8002h)
                call    ReadPtrTable_HL
                call    DoModEnv

loc_677:                                ; CODE XREF: UpdateTrack+D8↑j
                                        ; UpdateTrack+DF↑j
                ld      a, (ix+0Eh)
                or      (ix+0Fh)
                jp      z, loc_737

loc_680:                                ; CODE XREF: UpdateTrack+11A↓j
                bit     0, (ix+0)
                jp      nz, loc_69E
                ld      a, (ix+1)
                and     3
                add     a, 0A4h
                ld      c, a
                ld      a, h
                call    WriteFMIorII
                dec     c
                dec     c
                dec     c
                dec     c
                ld      a, l
                call    WriteFMIorII
                jp      DoNoteOn
; ---------------------------------------------------------------------------

loc_69E:                                ; CODE XREF: UpdateTrack+F9↑j
                ld      a, (ix+1)
                and     7
                cp      2
                jp      nz, loc_680
                push    hl
                push    bc
                push    de
                ld      b, 4
                bit     3, (ix+1)
                jp      z, loc_6B9
                ld      de, $1D1E   ; Special FM3 Notes (mode 02)
                jr      loc_6BC
; ---------------------------------------------------------------------------

loc_6B9:                                ; CODE XREF: UpdateTrack+126↑j
                ld      de, $1D1A   ; Special FM3 Notes (mode 0A)

loc_6BC:                                ; CODE XREF: UpdateTrack+12C↑j
                ld      hl, SpcFM3Regs

loc_6BF:                                ; CODE XREF: UpdateTrack+14A↓j
                ld      a, (de)
                or      a
                jp      z, loc_709
                cp      1
                jp      z, loc_702
                cp      2
                jp      z, loc_6FB
                cp      3
                jp      z, loc_6F4

loc_6D3:                                ; CODE XREF: UpdateTrack+1A0↓j
                inc     hl
                inc     de
                djnz    loc_6BF
                pop     de
                pop     bc
                pop     hl

DoNoteOn:                               ; CODE XREF: UpdateTrack+110↑j
                ld      a, ($1D0E)
                cp      80h
                ret     nz              ; didn't start a new note just now - return
                ld      a, (ix+1)
                and     7
                ld      c, 28h
                bit     1, (ix+0)
                call    z, WriteFMIMain ; if 'Hold' bit is not set, retrigger note
                or      0F0h
                jp      WriteFMIMain
; ---------------------------------------------------------------------------
                ret
; ---------------------------------------------------------------------------

loc_6F4:                                ; CODE XREF: UpdateTrack+145↑j
                ld      a, (hl)
                push    de
                ld      de, 1E4h
                jr      loc_714
; ---------------------------------------------------------------------------

loc_6FB:                                ; CODE XREF: UpdateTrack+140↑j
                ld      a, (hl)
                push    de
                ld      de, 18Eh
                jr      loc_714
; ---------------------------------------------------------------------------

loc_702:                                ; CODE XREF: UpdateTrack+13B↑j
                ld      a, (hl)
                push    de
                ld      de, 132h
                jr      loc_714
; ---------------------------------------------------------------------------

loc_709:                                ; CODE XREF: UpdateTrack+136↑j
                ld      a, (hl)
                push    de
                push    hl
                ld      l, (ix+0Eh)
                ld      h, (ix+0Fh)
                jr      loc_71C
; ---------------------------------------------------------------------------

loc_714:                                ; CODE XREF: UpdateTrack+16E↑j
                                        ; UpdateTrack+175↑j ...
                push    hl
                ld      l, (ix+0Eh)
                ld      h, (ix+0Fh)
                add     hl, de

loc_71C:                                ; CODE XREF: UpdateTrack+187↑j
                ld      c, a
                ld      a, h
                call    WriteFMIMain
                dec     c
                dec     c
                dec     c
                dec     c
                ld      a, l
                call    WriteFMIMain
                pop     hl
                pop     de
                jp      loc_6D3
; ---------------------------------------------------------------------------
SpcFM3Regs:                             ; DATA XREF: UpdateTrack:loc_6BC↑o
                db 0ADh, 0AEh, 0ACh, 0A6h
; ---------------------------------------------------------------------------
                bit     1, (ix+0)
                ret     nz

loc_737:                                ; CODE XREF: UpdateTrack+F2↑j
                ld      (ix+13h), 1Fh
; End of function UpdateTrack


; =============== S U B R O U T I N E =======================================


DoNoteOff:                              ; CODE XREF: DrumUpdateTrack+1B↑p
                                        ; DrumUpdate_Upd+FA↑p ...
                bit     1, (ix+0)
                ret     nz
                ld      a, (ix+1)
                and     7

FMNoteOff:                              ; CODE XREF: RAM:0AB3↓p
                                        ; RAM:0B22↓p ...
                ld      c, 28h
                call    WriteFMIMain
                ret
; End of function DoNoteOff


; =============== S U B R O U T I N E =======================================


ReadPtrTable_HL:                        ; CODE XREF: UpdateTrack+E6↑p
                ld      c, a
                ld      b, 0
                add     hl, bc
                add     hl, bc
                ld      a, (hl)
                inc     hl
                ld      h, (hl)
                ld      l, a
                ret
; End of function ReadPtrTable_HL

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DoModEnv

loc_755:                                ; CODE XREF: DoModEnv+21↓j
                                        ; DoModEnv+24↓j
                ld      (ix+0Dh), a
; END OF FUNCTION CHUNK FOR DoModEnv

; =============== S U B R O U T I N E =======================================


DoModEnv:                               ; CODE XREF: UpdateTrack+E9↑p

; FUNCTION CHUNK AT 0755 SIZE 00000003 BYTES

                push    hl
                ld      c, (ix+0Dh)
                ld      b, 0
                add     hl, bc
                ld      c, l
                ld      b, h
                pop     hl
                ld      a, (bc)
                bit     7, a
                jp      z, ModEnv_Positive
                cp      82h
                jr      z, ModEnv_Jump2Idx
                cp      80h
                jr      z, ModEnv_Reset
                ld      a, 0FFh
                ld      (ix+14h), a
                pop     hl
                ret
; ---------------------------------------------------------------------------

ModEnv_Jump2Idx:                        ; CODE XREF: DoModEnv+12↑j
                inc     bc
                ld      a, (bc)
                jr      loc_755
; ---------------------------------------------------------------------------

ModEnv_Reset:                           ; CODE XREF: DoModEnv+16↑j
                xor     a
                jr      loc_755
; ---------------------------------------------------------------------------

ModEnv_Positive:                        ; CODE XREF: DoModEnv+D↑j
                inc     (ix+0Dh)
                ld      l, a
                ld      h, 0
                add     hl, de
                ld      a, h
                cp      (ix+10h)
                jr      z, loc_78B

loc_78B:
                ld      (ix+10h), a
                ret
; End of function DoModEnv


; =============== S U B R O U T I N E =======================================


TrkUpdate_Proc:                         ; CODE XREF: UpdateTrack+9↑p

; FUNCTION CHUNK AT 0830 SIZE 00000016 BYTES

                ld      e, (ix+3)
                ld      d, (ix+4)

loc_795:                                ; CODE XREF: RAM:0847↓j
                ld      a, (de)
                inc     de
                cp      0E0h
                jp      nc, cfHandler

TrkUpdPrc_Note:                         ; CODE XREF: DrumUpdateTrack+35↑p
                bit     3, (ix+0)
                jp      nz, DoRawFreqMode
                cp      80h
                jp      c, SetDuration
                jr      nz, GetNote

GetNote:
                call    GetFrequency
                ld      a, (hl)
                ld      (ix+0Eh), a
                inc     hl
                ld      a, (hl)
                ld      (ix+0Fh), a

loc_7B6:                                ; CODE XREF: TrkUpdate_Proc+85↓j
                bit     5, (ix+0)
                jp      z, loc_7D3
                ld      a, (de)         ; read Pitch Slide Speed
                inc     de
                ld      (ix+12h), a
                ld      (ix+11h), a
                bit     3, (ix+0)
                ld      a, (de)
                jr      nz, loc_7E0     ; Raw Frequency Mode - skip
                ld      (ix+11h), a
                inc     de
                ld      a, (de)
                jr      loc_7E0
; ---------------------------------------------------------------------------

loc_7D3:                                ; CODE XREF: DrumUpdateTrack+52↑j
                                        ; DrumUpdateTrack+87↑j ...
                ld      a, (de)
                or      a
                jp      p, loc_7E0
                ld      a, (ix+15h)
                ld      (ix+0Ah), a
                jr      loc_7F1
; ---------------------------------------------------------------------------

loc_7E0:                                ; CODE XREF: TrkUpdate_Proc+3B↑j
                                        ; TrkUpdate_Proc+42↑j ...
                inc     de

SetDuration:                            ; CODE XREF: DrumUpdateTrack+4B↑j
                                        ; DrumUpdateTrack+83↑j ...
                ld      b, (ix+2)
                dec     b
                jr      z, loc_7EB
                ld      c, a

loc_7E8:                                ; CODE XREF: TrkUpdate_Proc+5A↓j
                add     a, c
                djnz    loc_7E8

loc_7EB:                                ; CODE XREF: TrkUpdate_Proc+56↑j
                ld      (ix+0Ah), a
                ld      (ix+15h), a

loc_7F1:                                ; CODE XREF: TrkUpdate_Proc+4F↑j
                xor     a
                ld      (ix+0Ch), a
                ld      (ix+0Dh), a
                ld      (ix+0Bh), a
                ld      (ix+13h), a
                ld      (ix+14h), a
                ld      (ix+3), e
                ld      (ix+4), d
                ld      a, 80h
                ret
; ---------------------------------------------------------------------------

DoRawFreqMode:                          ; CODE XREF: TrkUpdate_Proc+11↑j
                ld      h, a
                ld      a, (de)
                inc     de
                ld      l, a
                ld      (ix+0Eh), l
                ld      (ix+0Fh), h
                jp      loc_7B6
; End of function TrkUpdate_Proc


; =============== S U B R O U T I N E =======================================


GetFrequency:                           ; CODE XREF: TrkUpdate_Proc:GetNote↑p
                sub     80h
                jr      z, loc_81E
                add     a, (ix+5)

loc_81E:                                ; CODE XREF: GetFrequency+2↑j
                ld      hl, PSGFreqs
                bit     7, (ix+1)
                jr      nz, loc_82A
                ld      hl, FMFreqs

loc_82A:                                ; CODE XREF: GetFrequency+E↑j
                ld      c, a
                ld      b, 0
                add     hl, bc
                add     hl, bc
                ret
; End of function GetFrequency

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR TrkUpdate_Proc

cfHandler:                              ; CODE XREF: TrkUpdate_Proc+A↑j
                ld      hl, cfReturn

loc_833:                                ; CODE XREF: DrumUpdateTrack+1D9↑j
                push    hl
                sub     0E5h
                jp      c, cfF3_PSGNoise
                ld      hl, cfPtrTable
                add     a, a
                ld      c, a
                ld      b, 0
                add     hl, bc
                ld      c, (hl)
                inc     hl
                ld      h, (hl)
                ld      l, c
                jp      (hl)
; END OF FUNCTION CHUNK FOR TrkUpdate_Proc
; ---------------------------------------------------------------------------

cfReturn:                               ; DATA XREF: TrkUpdate_Proc:cfHandler↑o
                inc     de
                jp      loc_795
; ---------------------------------------------------------------------------
cfPtrTable:     dw cfE5_PauseMusic, cfE6_ChgVol, cfE7_DrumVol123
                                        ; DATA XREF: TrkUpdate_Proc+AA↑o
                dw cfE8_FM3MelMode, cfE9_SetLFOSpd, cfEA_SetFMS, cfEB_SetAMS
                dw cfEC_null, cfED_null, cfEE_Hold, cfEF_SetFMIns
                dw cfF0_SetVol, cfF1_FM3DrmMode, cfF2_StopTrk, cfF3_PSGNoise
                dw cfF4_ModType, cfF5_SetPSGIns, cfF6_GoTo, cfF7_Loop
                dw cfF8_GoSub, cfF9_Return, cfFA_TickMult, cfFB_ChgTransp
                dw cfFC_PitchSlide, cfFD_RawFrqMode, cfFE_SpcFM3Note, cfFF_Pan
; ---------------------------------------------------------------------------

cfE5_PauseMusic:                        ; DATA XREF: RAM:cfPtrTable↑o
                ld      a, 1
                ld      ($1D08), a
                dec     de
                ret
; ---------------------------------------------------------------------------

cfE7_DrumVol123:                        ; DATA XREF: RAM:cfPtrTable↑o
                ld      a, (de)
                ld      ($1D22), a  ; Drum Volume - Operator 1 (unused)
                inc     de
                ld      a, (de)
                ld      ($1D23), a  ; Drum Volume - Operator 2 (unused)
                inc     de
                ld      a, (de)
                ld      ($1D24), a  ; Drum Volume - Operator 3 (unused)
                ret
; ---------------------------------------------------------------------------

cfE8_FM3MelMode:                        ; DATA XREF: RAM:0850↑o
                set     3, (ix+1)       ; 02 (FM 3 Drum Mode) -> 0A (FM 3 Melody Mode)
                set     0, (ix+0)
                ld      a, (de)
                ld      ($1D1E), a  ; Special FM3 Notes (mode 0A)
                inc     de
                ld      a, (de)
                ld      ($1D1F), a
                inc     de
                ld      a, (de)
                ld      ($1D20), a
                inc     de
                ld      a, (de)
                ld      ($1D21), a
                ret
; ---------------------------------------------------------------------------

cfFE_SpcFM3Note:                        ; DATA XREF: RAM:0850↑o
                set     0, (ix+0)
                ld      a, (de)
                ld      ($1D1A), a  ; Special FM3 Notes (mode 02)
                inc     de
                ld      a, (de)
                ld      ($1D1B), a
                inc     de
                ld      a, (de)
                ld      ($1D1C), a
                inc     de
                ld      a, (de)
                ld      ($1D1D), a
                ret
; ---------------------------------------------------------------------------

cfEC_null:                              ; DATA XREF: RAM:0850↑o
                ret
; ---------------------------------------------------------------------------

cfED_null:                              ; DATA XREF: RAM:0850↑o
                ret
; ---------------------------------------------------------------------------

cfEE_Hold:                              ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                cp      1
                jr      nz, loc_8D6
                set     1, (ix+0)
                ret
; ---------------------------------------------------------------------------

loc_8D6:                                ; CODE XREF: RAM:08CF↑j
                res     1, (ix+0)
                ret
; ---------------------------------------------------------------------------

cfEF_SetFMIns:                          ; DATA XREF: RAM:0850↑o
                ld      a, (ix+1)
                bit     7, a
                ret     nz
                ld      a, (de)
                push    de
                push    hl
                push    bc
                ld      (ix+7), a
                ld      hl, (8006h)
                add     a, a
                ld      b, 0
                ld      c, a
                add     hl, bc
                ld      e, (hl)
                inc     hl
                ld      d, (hl)
                ex      de, hl
                ld      a, (ix+1)
                and     3
                ld      b, a
                call    SendFMIns
                pop     bc
                pop     hl
                pop     de
                ld      a, (ix+8)
                or      a
                jr      nz, loc_943
                ret
; ---------------------------------------------------------------------------

cfFF_Pan:                               ; DATA XREF: RAM:0850↑o
                ld      a, (ix+16h)
                and     3Fh
                jr      loc_91A
; ---------------------------------------------------------------------------

cfEB_SetAMS:                            ; DATA XREF: RAM:0850↑o
                ld      a, (ix+16h)
                and     0C7h
                jr      loc_91A
; ---------------------------------------------------------------------------

cfEA_SetFMS:                            ; DATA XREF: RAM:0850↑o
                ld      a, (ix+16h)
                and     0F0h

loc_91A:                                ; CODE XREF: RAM:090C↑j
                                        ; RAM:0913↑j
                ld      (ix+16h), a
                ld      a, (de)
                or      (ix+16h)
                ld      (ix+16h), a
                push    af
                ld      a, (ix+1)
                and     3
                add     a, 0B4h
                ld      c, a
                pop     af
                call    WriteFMIorII
                ret
; ---------------------------------------------------------------------------

cfE9_SetLFOSpd:                         ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                ld      c, 22h
                call    WriteFMIMain
                ret
; ---------------------------------------------------------------------------

cfF1_FM3DrmMode:                        ; DATA XREF: RAM:0850↑o
                res     3, (ix+1)       ; 0A (FM 3 Melody Mode) -> 02 (FM 3 Drum Mode)
                dec     de
                ret
; ---------------------------------------------------------------------------

cfF0_SetVol:                            ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                ld      (ix+8), a

loc_943:                                ; CODE XREF: RAM:0904↑j
                ld      a, (ix+17h)
                and     7
                cp      4
                jp      z, loc_97F
                jp      c, loc_995
                cp      7
                jp      c, loc_969
                call    GetFMVolReg_V
                ld      c, a
                ld      a, (ix+8)
                add     a, (ix+18h)
                ld      (ix+18h), a
                cp      7Fh
                jr      nc, loc_969
                call    WriteFMIorII

loc_969:                                ; CODE XREF: RAM:0952↑j
                                        ; RAM:0964↑j
                call    GetFMVolReg_V
                add     a, 4
                ld      c, a
                ld      a, (ix+8)
                add     a, (ix+1Ah)
                ld      (ix+1Ah), a
                cp      7Fh
                jr      nc, loc_97F
                call    WriteFMIorII

loc_97F:                                ; CODE XREF: RAM:094A↑j
                                        ; RAM:097A↑j
                call    GetFMVolReg_V
                add     a, 8
                ld      c, a
                ld      a, (ix+8)
                add     a, (ix+19h)
                ld      (ix+19h), a
                cp      7Fh
                jr      nc, loc_995
                call    WriteFMIorII

loc_995:                                ; CODE XREF: RAM:094D↑j
                                        ; RAM:0990↑j
                call    GetFMVolReg_V
                add     a, 0Ch
                ld      c, a
                ld      a, (ix+8)
                add     a, (ix+1Bh)
                ld      (ix+1Bh), a
                cp      7Fh
                ret     nc
                call    WriteFMIorII
                ret

; =============== S U B R O U T I N E =======================================


GetFMVolReg_V:                          ; CODE XREF: RAM:0955↑p
                                        ; RAM:loc_969↑p ...
                ld      a, (ix+1)
                and     3
                add     a, 40h
                ret
; End of function GetFMVolReg_V

; ---------------------------------------------------------------------------

cfE6_ChgVol:                            ; DATA XREF: RAM:cfPtrTable↑o
                ld      a, (de)
                ld      ($1D25), a  ; write to cache
                ld      a, (ix+17h)
                and     7
                cp      4
                jp      z, loc_9F3
                jp      c, loc_A09
                cp      7
                jp      c, loc_9DD
                call    GetFMVolReg_V
                ld      c, a
                ld      a, ($1D25)
                add     a, (ix+18h)
                ld      (ix+18h), a
                cp      7Fh
                jr      nc, loc_9DD
                call    WriteFMIorII

loc_9DD:                                ; CODE XREF: RAM:09C6↑j
                                        ; RAM:09D8↑j
                call    GetFMVolReg_V
                add     a, 4
                ld      c, a
                ld      a, ($1D25)
                add     a, (ix+1Ah)
                ld      (ix+1Ah), a
                cp      7Fh
                jr      nc, loc_9F3
                call    WriteFMIorII

loc_9F3:                                ; CODE XREF: RAM:09BE↑j
                                        ; RAM:09EE↑j
                call    GetFMVolReg_V
                add     a, 8
                ld      c, a
                ld      a, ($1D25)
                add     a, (ix+19h)
                ld      (ix+19h), a
                cp      7Fh
                jr      nc, loc_A09
                call    WriteFMIorII

loc_A09:                                ; CODE XREF: RAM:09C1↑j
                                        ; RAM:0A04↑j
                call    GetFMVolReg_V
                add     a, 0Ch
                ld      c, a
                ld      a, ($1D25)
                add     a, (ix+8)
                ld      (ix+8), a
                ld      a, ($1D25)
                add     a, (ix+1Bh)
                ld      (ix+1Bh), a
                cp      7Fh
                ret     nc
                call    WriteFMIorII
                ret
; ---------------------------------------------------------------------------

cfFB_ChgTransp:                         ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                add     a, (ix+5)
                ld      (ix+5), a
                ret
; ---------------------------------------------------------------------------

cfFA_TickMult:                          ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                ld      (ix+2), a
                ret
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DrumUpdateTrack

cfF3_PSGNoise:                          ; CODE XREF: TrkUpdate_Proc+A7↑j
                                        ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                or      0E0h
                call    WritePSG
                ld      ($1D19), a
                ret
; END OF FUNCTION CHUNK FOR DrumUpdateTrack
; ---------------------------------------------------------------------------
                ret
; ---------------------------------------------------------------------------

cfF5_SetPSGIns:                         ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                inc     de
                ld      (ix+7), a
                ret
; ---------------------------------------------------------------------------

cfF4_ModType:                           ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                ld      (ix+6), a
                ret
; ---------------------------------------------------------------------------

cfF6_GoTo:                              ; CODE XREF: RAM:0CBC↓j
                                        ; DATA XREF: RAM:0850↑o
                ex      de, hl
                ld      e, (hl)
                inc     hl
                ld      d, (hl)
                dec     de
                ret
; ---------------------------------------------------------------------------

cfFC_PitchSlide:                        ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                cp      1
                jr      nz, loc_A5B
                set     5, (ix+0)
                ret
; ---------------------------------------------------------------------------

loc_A5B:                                ; CODE XREF: RAM:0A54↑j
                res     5, (ix+0)
                ret
; ---------------------------------------------------------------------------

cfFD_RawFrqMode:                        ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                cp      1
                jr      nz, loc_A6A
                set     3, (ix+0)
                ret
; ---------------------------------------------------------------------------

loc_A6A:                                ; CODE XREF: RAM:0A63↑j
                res     3, (ix+0)
                ret
; ---------------------------------------------------------------------------

cfF2_StopTrk:                           ; DATA XREF: RAM:0850↑o
                xor     a
                ld      ($1D0A), a
                ld      (ix+0), a
                ld      a, (ix+1)
                and     7
                cp      2
                jp      z, RestoreTrk_FM3
                cp      5
                jp      z, RestoreTrk_FM5
                cp      6
                jp      z, RestoreTrk_FM6
                ld      hl, Regs_MuteChn
                ld      b, a
                bit     2, (ix+1)
                jp      z, loc_A9B
                call    WriteRegII_Loop
                jp      loc_C78
; ---------------------------------------------------------------------------

loc_A9B:                                ; CODE XREF: RAM:0A92↑j
                call    WriteRegI_Loop
                jp      loc_C78
; ---------------------------------------------------------------------------

RestoreTrk_FM3:                         ; CODE XREF: RAM:0A7D↑j
                ld      hl, Regs_MuteChn
                ld      b, 2
                call    WriteRegI_Loop
                ld      hl,  $1DA6+1
                bit     3, (hl)
                jp      z, loc_B19
                ld      a, 3
                call    FMNoteOff
                push    de
                push    hl
                push    bc
                ld      hl,  $1DA6+7
                ld      a, (hl)
                ld      hl, (8006h)
                add     a, a
                ld      b, 0
                ld      c, a
                add     hl, bc
                ld      e, (hl)
                inc     hl
                ld      d, (hl)
                ex      de, hl
                ld      b, 2
                call    WriteRegI_Loop
                ld      hl,  $1DA6+17h
                ld      a, (hl)
                and     7
                cp      4
                jp      z, loc_AF3
                jp      c, loc_AFC
                cp      7
                jp      c, loc_AEA
                ld      c, 42h
                ld      hl,  $1DA6+18h
                ld      a, (hl)
                call    WriteFMIMain

loc_AEA:                                ; CODE XREF: RAM:0ADE↑j
                ld      c, 46h
                ld      hl,  $1DA6+1Ah
                ld      a, (hl)
                call    WriteFMIMain

loc_AF3:                                ; CODE XREF: RAM:0AD6↑j
                ld      c, 4Ah
                ld      hl,  $1DA6+19h
                ld      a, (hl)
                call    WriteFMIMain

loc_AFC:                                ; CODE XREF: RAM:0AD9↑j
                ld      c, 4Eh
                ld      hl,  $1DA6+1Bh
                ld      a, (hl)
                call    WriteFMIMain
                ld      hl,  $1DA6+16h
                ld      a, (hl)
                ld      c, 0B6h
                call    WriteFMIMain
                pop     bc
                pop     hl
                pop     de
                ld      hl, $1DA6   ; Music Track FM 3
                res     2, (hl)
                jp      loc_C78
; ---------------------------------------------------------------------------

loc_B19:                                ; CODE XREF: RAM:0AAE↑j
                ld      c, 0B6h
                ld      a, 0C0h
                call    WriteFMI
                ld      a, 2
                call    FMNoteOff
                ld      hl, $1DA6   ; Music Track FM 3
                res     2, (hl)
                jp      loc_C79
; ---------------------------------------------------------------------------

RestoreTrk_FM5:                         ; CODE XREF: RAM:0A82↑j
                ld      hl, Regs_MuteChn
                ld      b, 1
                call    WriteRegII_Loop
                ld      a, 5
                call    FMNoteOff
                push    de
                push    hl
                push    bc
                ld      hl, $1E66   ; Special SFX Track FM 5
                bit     7, (hl)
                jr      z, loc_B60
                ld      hl,  $1E66+7
                ld      a, (hl)
                ld      hl, (8006h)
                add     a, a
                ld      b, 0
                ld      c, a
                add     hl, bc
                ld      e, (hl)
                inc     hl
                ld      d, (hl)
                ex      de, hl
                ld      b, 1
                call    WriteRegII_Loop
                ld      hl, $1E66   ; Special SFX Track FM 5
                res     2, (hl)
                jr      loc_BB5
; ---------------------------------------------------------------------------

loc_B60:                                ; CODE XREF: RAM:0B42↑j
                ld      hl,  $1E06+7
                ld      a, (hl)
                ld      hl, (8006h)
                add     a, a
                ld      b, 0
                ld      c, a
                add     hl, bc
                ld      e, (hl)
                inc     hl
                ld      d, (hl)
                ex      de, hl
                ld      b, 1
                call    WriteRegII_Loop
                ld      hl,  $1E06+17h
                ld      a, (hl)
                and     7
                cp      4
                jp      z, loc_B9A
                jp      c, loc_BA3
                cp      7
                jp      c, loc_B91
                ld      c, 41h
                ld      hl,  $1E06+18h
                ld      a, (hl)
                call    WriteFMII

loc_B91:                                ; CODE XREF: RAM:0B85↑j
                ld      c, 45h
                ld      hl,  $1E06+1Ah
                ld      a, (hl)
                call    WriteFMII

loc_B9A:                                ; CODE XREF: RAM:0B7D↑j
                ld      c, 49h
                ld      hl,  $1E06+19h
                ld      a, (hl)
                call    WriteFMII

loc_BA3:                                ; CODE XREF: RAM:0B80↑j
                ld      c, 4Dh
                ld      hl,  $1E06+1Bh
                ld      a, (hl)
                call    WriteFMII
                ld      hl,  $1E06+16h
                ld      a, (hl)
                ld      c, 0B5h
                call    WriteFMII

loc_BB5:                                ; CODE XREF: RAM:0B5E↑j
                pop     bc
                pop     hl
                pop     de
                ld      hl, $1E06   ; Music Track FM 5
                res     2, (hl)
                jp      loc_C78
; ---------------------------------------------------------------------------

RestoreTrk_FM6:                         ; CODE XREF: RAM:0A87↑j
                ld      hl, Regs_MuteChn
                ld      b, 2
                call    WriteRegII_Loop
                ld      a, 6
                call    FMNoteOff
                push    de
                push    hl
                push    bc
                ld      hl, $1E96   ; Special SFX Track FM 6
                bit     7, (hl)
                jr      z, loc_BF3
                ld      hl,  $1E96+7
                ld      a, (hl)
                ld      hl, (8006h)
                add     a, a
                ld      b, 0
                ld      c, a
                add     hl, bc
                ld      e, (hl)
                inc     hl
                ld      d, (hl)
                ex      de, hl
                ld      b, 2
                call    WriteRegII_Loop
                ld      hl, $1E96   ; Special SFX Track FM 6
                res     2, (hl)
                jr      loc_C48
; ---------------------------------------------------------------------------

loc_BF3:                                ; CODE XREF: RAM:0BD5↑j
                ld      hl,  $1E36+7
                ld      a, (hl)
                ld      hl, (8006h)
                add     a, a
                ld      b, 0
                ld      c, a
                add     hl, bc
                ld      e, (hl)
                inc     hl
                ld      d, (hl)
                ex      de, hl
                ld      b, 2
                call    WriteRegII_Loop
                ld      hl,  $1E36+17h
                ld      a, (hl)
                and     7
                cp      4
                jp      z, loc_C2D
                jp      c, loc_C36
                cp      7
                jp      c, loc_C24
                ld      c, 42h
                ld      hl,  $1E36+18h
                ld      a, (hl)
                call    WriteFMII

loc_C24:                                ; CODE XREF: RAM:0C18↑j
                ld      c, 46h
                ld      hl,  $1E36+1Ah
                ld      a, (hl)
                call    WriteFMII

loc_C2D:                                ; CODE XREF: RAM:0C10↑j
                ld      c, 4Ah
                ld      hl,  $1E36+19h
                ld      a, (hl)
                call    WriteFMII

loc_C36:                                ; CODE XREF: RAM:0C13↑j
                ld      c, 4Eh
                ld      hl,  $1E36+1Bh
                ld      a, (hl)
                call    WriteFMII
                ld      hl,  $1E36+16h
                ld      a, (hl)
                ld      c, 0B6h
                call    WriteFMII

loc_C48:                                ; CODE XREF: RAM:0BF1↑j
                pop     bc
                pop     hl
                pop     de
                ld      hl, $1E36   ; Music Track FM 6
                res     2, (hl)
                jp      loc_C78
; ---------------------------------------------------------------------------
                add     a, 1Fh
                call    WritePSG
                cp      0DFh
                jp      c, loc_C78
                ld      a, ($1D19)
                call    WritePSG
                ld      a, 0DFh
                call    WritePSG
                ld      a, 0FFh
                call    WritePSG
                ld      hl, $1E96   ; Special SFX Track FM 6
                res     2, (hl)
                ld      hl,  $1F26+13h
                ld      a, 1Fh
                ld      (hl), a

loc_C78:                                ; CODE XREF: RAM:0A98↑j
                                        ; RAM:0A9E↑j ...
                pop     hl

loc_C79:                                ; CODE XREF: RAM:0B2A↑j
                pop     hl
                ret
; ---------------------------------------------------------------------------

cfF8_GoSub:                             ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                ld      c, a
                inc     de
                ld      a, (de)
                ld      b, a
                push    bc
                push    ix
                pop     hl
                dec     (ix+9)
                ld      c, (ix+9)
                dec     (ix+9)
                ld      b, 0
                add     hl, bc
                ld      (hl), d
                dec     hl
                ld      (hl), e
                pop     de
                dec     de
                ret
; ---------------------------------------------------------------------------

cfF9_Return:                            ; DATA XREF: RAM:0850↑o
                push    ix
                pop     hl
                ld      c, (ix+9)
                ld      b, 0
                add     hl, bc
                ld      e, (hl)
                inc     hl
                ld      d, (hl)
                inc     (ix+9)
                inc     (ix+9)
                ret
; ---------------------------------------------------------------------------

cfF7_Loop:                              ; DATA XREF: RAM:0850↑o
                ld      a, (de)
                inc     de
                add     a, 1Ch
                ld      c, a
                ld      b, 0
                push    ix
                pop     hl
                add     hl, bc
                ld      a, (hl)
                or      a
                jr      nz, loc_CBA
                ld      a, (de)
                ld      (hl), a

loc_CBA:                                ; CODE XREF: RAM:0CB6↑j
                inc     de
                dec     (hl)
                jp      nz, cfF6_GoTo
                inc     de
                ret

; =============== S U B R O U T I N E =======================================


StopAllSound:                           ; CODE XREF: DoFading+1B↑j
                                        ; DoFading+B3↑j ...
                xor     a
                ld      ($1D0A), a
                ld      hl, $1D46   ; 1D46 - Music Tracks
                ld      de, $1D46+1
                ld      bc, 23Fh        ; 240h = 12 tracks à 30h bytes
                ld      (hl), 0
                ldir
; End of function StopAllSound


; =============== S U B R O U T I N E =======================================


SilenceFM:                              ; CODE XREF: ResetFMChip+4↑p
                ld      hl, Regs_MuteAllChn
                ld      b, 0
                call    WriteRegI_Loop
                ld      hl, Regs_MuteAllChn
                ld      b, 0
                call    WriteRegII_Loop

SilenceFMNotes:                         ; CODE XREF: RAM:11C1↓p
                ld      b, 7
                xor     a
                ld      ($1D0C), a
                ld      ($1D0D), a
                ld      c, 28h

loc_CED:                                ; CODE XREF: SilenceFM+1F↓j
                call    WriteFMIMain
                inc     a
                djnz    loc_CED
                ret
; End of function SilenceFM


; =============== S U B R O U T I N E =======================================


SilencePSG:                             ; CODE XREF: RAM:0098↑p
                                        ; RAM:01D4↑p
                                        ; DATA XREF: ...
                push    hl
                push    bc
                ld      hl, PSGMuteVals
                ld      b, 0Bh

loc_CFB:                                ; CODE XREF: SilencePSG+C↓j
                ld      a, (hl)
                call    WritePSG
                inc     hl
                djnz    loc_CFB
                pop     bc
                pop     hl
                ret
; End of function SilencePSG


; =============== S U B R O U T I N E =======================================


SilenceAll:                             ; CODE XREF: DoPause_Exit+5↑p
                push    bc
                push    af
                ld      b, 3
                ld      c, 0B4h

loc_D0B:                                ; CODE XREF: SilenceAll+B↓j
                xor     a
                call    WriteFMI
                inc     c
                djnz    loc_D0B
                ld      b, 3
                ld      c, 0B4h

loc_D16:                                ; CODE XREF: SilenceAll+16↓j
                xor     a
                call    WriteFMII
                inc     c
                djnz    loc_D16
                xor     a
                ld      b, 7
                ld      c, 28h

loc_D22:                                ; CODE XREF: SilenceAll+21↓j
                call    WriteFMI
                inc     a
                djnz    loc_D22
                pop     af
                pop     bc
                jp      ClearSoundID
; End of function SilenceAll


; =============== S U B R O U T I N E =======================================


UnpauseOrStop:                          ; CODE XREF: DoUnpause+11↑p
                ld      a, ($1D0C)  ; 1D0C - Fade Enable
                or      a
                jp      z, UnpauseMusic ; fading disabled (00) - unpause music
                xor     a               ; was fading (01), so mute everything
                ld      ($1D0C), a  ; and disable fading
                jp      StopAllSound
; ---------------------------------------------------------------------------

UnpauseMusic:                           ; CODE XREF: UnpauseOrStop+4↑j
                push    af
                push    bc
                push    de
                ld      hl,  $1D46+16h
                ld      b, 3
                ld      c, 0B4h

loc_D45:                                ; CODE XREF: UnpauseOrStop+21↓j
                ld      a, (hl)
                call    WriteFMI
                inc     c
                ld      de, 30h
                add     hl, de
                djnz    loc_D45
                ld      hl,  $1DD6+16h
                ld      b, 3
                ld      c, 0B4h

loc_D57:                                ; CODE XREF: UnpauseOrStop+33↓j
                ld      a, (hl)
                call    WriteFMII
                inc     c
                ld      de, 30h
                add     hl, de
                djnz    loc_D57
                call    ResumeFM3
                call    ResumeFM5
                call    ResumeFM6
                pop     de
                pop     bc
                pop     af
                ld      a, 80h
                ld      ($1D03), a
                ret
; End of function UnpauseOrStop


; =============== S U B R O U T I N E =======================================


ResumeFM3:                              ; CODE XREF: UnpauseOrStop+35↑p
                ld      hl, $1DA6   ; Music Track FM 3
                ld      a, (hl)
                bit     2, a
                ret     z
                ld      hl, $1EC6   ; SFX Track FM 3
                ld      a, (hl)
                bit     7, a
                ld      hl,  $1EC6+16h
                jr      nz, loc_D89
                ld      hl,  $1E36+16h

loc_D89:                                ; CODE XREF: ResumeFM3+10↑j
                ld      a, (hl)
                ld      c, 0B6h
                call    WriteFMI
                ret
; End of function ResumeFM3


; =============== S U B R O U T I N E =======================================


ResumeFM5:                              ; CODE XREF: UnpauseOrStop+38↑p
                ld      hl, $1E06   ; Music Track FM 5
                ld      a, (hl)
                bit     2, a
                ret     z
                ld      hl, $1EF6   ; SFX Track FM 5
                ld      a, (hl)
                bit     7, a
                ld      hl,  $1EF6+16h
                jr      nz, loc_DA5
                ld      hl,  $1E66+16h

loc_DA5:                                ; CODE XREF: ResumeFM5+10↑j
                ld      a, (hl)
                ld      c, 0B5h
                call    WriteFMII
                ret
; End of function ResumeFM5


; =============== S U B R O U T I N E =======================================


ResumeFM6:                              ; CODE XREF: UnpauseOrStop+3B↑p
                ld      hl, $1E36   ; Music Track FM 6
                ld      a, (hl)
                bit     2, a
                ret     z
                ld      hl, $1F26   ; SFX Track FM 6
                ld      a, (hl)
                bit     7, a
                ld      hl,  $1F26+16h
                jr      nz, loc_DC1
                ld      hl,  $1E96+16h

loc_DC1:                                ; CODE XREF: ResumeFM6+10↑j
                ld      a, (hl)
                ld      c, 0B6h
                call    WriteFMII
                ret
; End of function ResumeFM6

; ---------------------------------------------------------------------------
PSGMuteVals:    db  80h,   0            ; DATA XREF: SilencePSG+2↑o
                db 0A0h,   0
                db 0C0h,   0
                db  9Fh,0BFh,0DFh,0FFh

; =============== S U B R O U T I N E =======================================


WriteFMIorII:                           ; CODE XREF: UpdateTrack+105↑p
                                        ; UpdateTrack+10D↑p ...
                bit     2, (ix+1)
                jr      nz, WriteFMIIMain
; End of function WriteFMIorII


; =============== S U B R O U T I N E =======================================


WriteFMIMain:                           ; CODE XREF: WriteFMIorII_2+6↑p
                                        ; LoadDrum_Op12b+2D↑p ...
                bit     2, (ix+0)
                ret     nz
; End of function WriteFMIMain


; =============== S U B R O U T I N E =======================================


WriteFMI:                               ; CODE XREF: ResetFMChip+E↑p
                                        ; RAM:0B1D↑p ...
                push    af
                ld      a, c
                ld      (4000h), a
                call    WaitForYM
                pop     af
                ld      (4001h), a
                ret
; End of function WriteFMI


; =============== S U B R O U T I N E =======================================


WriteFMIIMain:                          ; CODE XREF: WriteFMIorII+4↑j
                                        ; SendFMIns+2A↓p ...
                bit     2, (ix+0)
                ret     nz

WriteFMII:                              ; CODE XREF: WriteFMIorII_2:loc_1B0↑p
                                        ; RAM:0B8E↑p ...
                push    af
                ld      a, c
                ld      (4002h), a
                call    WaitForYM
                pop     af
                ld      (4003h), a
                ret
; End of function WriteFMIIMain


; =============== S U B R O U T I N E =======================================


SendFMIns:                              ; CODE XREF: DrumUpdateTrack+A9↑p
                                        ; LoadDrum_Op12b+1F↑p ...
                ld      a, (hl)
                cp      83h
                ret     z
                cp      0B0h
                call    z, SetRegB0
                cp      40h
                call    z, SetReg40
                cp      48h
                call    z, SetReg48
                cp      44h
                call    z, SetReg44
                cp      4Ch
                call    z, SetReg4C
                cp      0B4h
                call    z, SetRegB4
                add     a, b
                ld      c, a
                inc     hl
                ld      a, (hl)
                bit     2, (ix+1)
                call    nz, WriteFMIIMain
                bit     2, (ix+1)
                call    z, WriteFMIMain
                inc     hl
                jp      SendFMIns
; End of function SendFMIns


; =============== S U B R O U T I N E =======================================


SetRegB0:                               ; CODE XREF: SendFMIns+6↑p
                push    af
                inc     hl
                ld      a, (hl)
                ld      (ix+17h), a
                dec     hl
                pop     af
                ret
; End of function SetRegB0


; =============== S U B R O U T I N E =======================================


SetReg40:                               ; CODE XREF: SendFMIns+B↑p
                push    af
                inc     hl
                ld      a, (hl)
                ld      (ix+18h), a
                dec     hl
                pop     af
                ret
; End of function SetReg40


; =============== S U B R O U T I N E =======================================


SetReg48:                               ; CODE XREF: SendFMIns+10↑p
                push    af
                inc     hl
                ld      a, (hl)
                ld      (ix+19h), a
                dec     hl
                pop     af
                ret
; End of function SetReg48


; =============== S U B R O U T I N E =======================================


SetReg44:                               ; CODE XREF: SendFMIns+15↑p
                push    af
                inc     hl
                ld      a, (hl)
                ld      (ix+1Ah), a
                dec     hl
                pop     af
                ret
; End of function SetReg44


; =============== S U B R O U T I N E =======================================


SetReg4C:                               ; CODE XREF: SendFMIns+1A↑p
                push    af
                inc     hl
                ld      a, (hl)
                ld      (ix+1Bh), a
                dec     hl
                pop     af
                ret
; End of function SetReg4C


; =============== S U B R O U T I N E =======================================


SetRegB4:                               ; CODE XREF: SendFMIns+1F↑p
                push    af
                inc     hl
                ld      a, (hl)
                ld      (ix+16h), a
                dec     hl
                pop     af
                ret
; End of function SetRegB4


; =============== S U B R O U T I N E =======================================


WriteRegI_Loop:                         ; CODE XREF: DrumUpdateTrack+62↑p
                                        ; RAM:loc_A9B↑p ...
                ld      a, (hl)
                cp      83h
                ret     z
                add     a, b
                ld      c, a
                inc     hl
                ld      a, (hl)
                call    WriteFMIMain
                inc     hl
                jp      WriteRegI_Loop
; End of function WriteRegI_Loop


; =============== S U B R O U T I N E =======================================


WriteRegII_Loop:                        ; CODE XREF: RAM:0A95↑p
                                        ; RAM:0B32↑p ...
                ld      a, (hl)
                cp      83h
                ret     z
                add     a, b
                ld      c, a
                inc     hl
                ld      a, (hl)
                call    WriteFMIIMain
                inc     hl
                jp      WriteRegII_Loop
; End of function WriteRegII_Loop

; ---------------------------------------------------------------------------
PSGFreqs:       dw    0                 ; DATA XREF: GetFrequency:loc_81E↑o
                dw  3F8h, 3BFh, 389h, 356h, 326h, 2FAh, 2CEh, 2A6h, 280h, 25Ch, 23Ah, 21Ah
                dw  1FCh, 1DFh, 1C4h, 1ABh, 193h, 17Dh, 167h, 153h, 140h, 12Eh, 11Dh, 10Dh
                dw  0FEh, 0F0h, 0E2h, 0D6h, 0CAh, 0BEh, 0B4h, 0AAh, 0A0h,  97h,  8Fh,  87h
                dw   7Fh,  78h,  71h,  6Bh,  65h,  5Fh,  5Ah,  55h,  50h,  4Bh,  47h,  43h
                dw   40h,  3Ch,  3Ah,  36h,  33h,  30h,  2Dh,  2Bh,  28h,  25h,  23h,  21h
                dw   1Fh,  1Eh,  1Bh,  1Ah,  19h,  17h,  16h,  15h,  14h,  13h,  12h,  11h
FMFreqs:        dw    0                 ; DATA XREF: GetFrequency+10↑o
                dw 0A69h,0A8Dh,0AB4h,0ADDh,0B09h,0B37h,0B68h,0B9Ch,0BD3h,0C0Dh,0C4Bh,0C8Ch
                dw 1269h,128Dh,12B4h,12DDh,1309h,1337h,1368h,139Ch,13D3h,140Dh,144Bh,148Ch
                dw 1A69h,1A8Dh,1AB4h,1ADDh,1B09h,1B37h,1B68h,1B9Ch,1BD3h,1C0Dh,1C4Bh,1C8Ch
                dw 2269h,228Dh,22B4h,22DDh,2309h,2337h,2368h,239Ch,23D3h,240Dh,244Bh,248Ch
                dw 2A69h,2A8Dh,2AB4h,2ADDh,2B09h,2B37h,2B68h,2B9Ch,2BD3h,2C0Dh,2C4Bh,2C8Ch
                dw 3269h,328Dh,32B4h,32DDh,3309h,3337h,3368h,339Ch,33D3h,340Dh,344Bh,348Ch
                dw 3A69h,3A8Dh,3AB4h,3ADDh,3B09h,3B37h,3B68h,3B9Ch,3BD3h,3C0Dh,3C4Bh,3C8Ch
                db  21h, 00h
                db  24h, 00h
                db  25h, 00h
                db  26h,0E5h
                db  27h, 30h
                db  28h, 00h
                db  28h, 01h
                db  28h, 02h
                db  2Dh, 00h
                db  90h, 00h
                db  91h, 00h
                db  92h, 00h
                db  94h, 00h
                db  95h, 00h
                db  96h, 00h
                db  98h, 00h
                db  99h, 00h
                db  9Ah, 00h
                db  9Ch, 00h
                db  9Dh, 00h
                db  9Eh, 00h
                db  83h
Regs_MuteAllChn:db  40h, 7Fh            ; DATA XREF: SilenceFM↑o
                                        ; SilenceFM+8↑o
                db  41h, 7Fh
                db  42h, 7Fh
                db  44h, 7Fh
                db  45h, 7Fh
                db  46h, 7Fh
                db  48h, 7Fh
                db  49h, 7Fh
                db  4Ah, 7Fh
                db  4Ch, 7Fh
                db  4Dh, 7Fh
                db  4Eh, 7Fh
                db  80h,0FFh
                db  84h,0FFh
                db  88h,0FFh
                db  8Ch,0FFh
                db  81h,0FFh
                db  85h,0FFh
                db  89h,0FFh
                db  8Dh,0FFh
                db  82h,0FFh
                db  86h,0FFh
                db  8Ah,0FFh
                db  8Eh,0FFh
                db  83h
Regs_MuteChn:   db  80h,0FFh            ; DATA XREF: DrumUpdateTrack+5D↑o
                                        ; RAM:0A8A↑o ...
                db  84h,0FFh
                db  88h,0FFh
                db  8Ch,0FFh
                db  40h, 7Fh
                db  44h, 7Fh
                db  48h, 7Fh
                db  4Ch, 7Fh
                db  83h

; =============== S U B R O U T I N E =======================================


PlaySoundID:                            ; CODE XREF: UpdateAll+F↑p
                ld      a, ($1D03)
                bit     7, a
                jp      z, StopAllSound ; 00-7F - Stop All
                cp      90h
                jp      c, PlayMusic    ; 80-8F - Music
                cp      0CFh
                jp      c, PlaySFX      ; 90-CE - SFX
                cp      0E0h
                jp      c, PlaySpcSFX   ; D0-DF - Special SFX (BF is invalid)
                cp      0E4h
                jp      nc, StopAllSound ; E4-FF - Stop All

PlaySnd_Command:                        ; E0-E3 - Special Commands
                sub     0E0h
                add     a, a
                ld      c, a
                ld      b, 0
                ld      hl, CmdPtrTable
                add     hl, bc
                ld      a, (hl)
                inc     hl
                ld      h, (hl)
                ld      l, a
                jp      (hl)
; ---------------------------------------------------------------------------

PlayMusic:                              ; CODE XREF: PlaySoundID+A↑j
                sub     81h
                ret     m
                push    af
                call    StopAllSound
                pop     af
                ld      b, 0
                ld      c, a
                ld      hl, MusicTempoList
                add     hl, bc
                push    af
                ld      a, (hl)
                ld      ($1D01), a
                ld      ($1D02), a
                ld      de, $1D46   ; 1D46 - Music Tracks
                ld      hl, (8000h)
                pop     af
                call    ReadPtrTable_BC
                jp      LoadSmpsTracks
; ---------------------------------------------------------------------------

PlaySpcSFX:                             ; CODE XREF: PlaySoundID+14↑j
                ld      hl, SpcSFXPtrs
                sub     0D0h
                call    ReadPtrTable_BC
                ld      h, b
                ld      l, c
                inc     hl
                inc     hl
                ld      a, (bc)
                cp      1
                jr      nz, loc_10A1
                ld      a, (hl)
                cp      2
                jp      z, loc_10AB
                cp      5
                jp      z, loc_10B1
                cp      6
                jp      z, loc_10B7

loc_10A1:                               ; CODE XREF: PlaySoundID+5E↑j
                cp      2
                jp      z, loc_10B1
                cp      3
                jp      z, loc_10AB

loc_10AB:                               ; CODE XREF: PlaySoundID+63↑j
                ld      de, $1E36   ; Special SFX Track FM 3 (actually Music Track FM 6)
                jp      LoadSmpsTracks
; ---------------------------------------------------------------------------

loc_10B1:                               ; CODE XREF: PlaySoundID+68↑j
                                        ; PlaySoundID+72↑j
                ld      de, $1E66   ; Special SFX Track FM 5
                jp      LoadSmpsTracks
; ---------------------------------------------------------------------------

loc_10B7:                               ; CODE XREF: PlaySoundID+6D↑j
                ld      de, $1E96   ; Special SFX Track FM 6
                jp      LoadSmpsTracks
; ---------------------------------------------------------------------------

PlaySFX:                                ; CODE XREF: PlaySoundID+F↑j
                sub     90h
                ld      hl, SFXPtrs
                call    ReadPtrTable_BC
                ld      h, b
                ld      l, c
                inc     hl
                inc     hl
                ld      a, (bc)
                cp      1               ; exactly one SFX track?
                jr      nz, loc_10DE    ; no - jump
                ld      a, (hl)
                cp      2
                jp      z, loc_10E8     ; FM 3
                cp      5
                jp      z, loc_10F3     ; FM 5
                cp      6
                jp      z, loc_10FE     ; FM 6

loc_10DE:                               ; CODE XREF: PlaySoundID+9B↑j
                cp      2
                jp      z, loc_1109     ; 2 SFX tracks - jump (FM 5+6)
                cp      3
                jp      z, loc_1119     ; 3 SFX tracks - jump (FM 3+5+6)

loc_10E8:                               ; CODE XREF: PlaySoundID+A0↑j
                ld      de, $1EC6   ; SFX Track FM 3
                ld      hl, $1DA6   ; Music Track FM 3
                set     2, (hl)         ; set 'overridden' bit
                jp      LoadSmpsTracks
; ---------------------------------------------------------------------------

loc_10F3:                               ; CODE XREF: PlaySoundID+A5↑j
                ld      de, $1EF6   ; SFX Track FM 5
                ld      hl, $1E06   ; Music Track FM 5
                set     2, (hl)
                jp      LoadSmpsTracks
; ---------------------------------------------------------------------------

loc_10FE:                               ; CODE XREF: PlaySoundID+AA↑j
                ld      de, $1F26   ; SFX Track FM 6
                ld      hl, $1E36   ; Music Track FM 6
                set     2, (hl)
                jp      LoadSmpsTracks
; ---------------------------------------------------------------------------

loc_1109:                               ; CODE XREF: PlaySoundID+AF↑j
                ld      de, $1EF6   ; SFX Track FM 5
                ld      hl, $1E06   ; Music Track FM 5
                set     2, (hl)
                ld      hl, $1E36   ; Music Track FM 6
                set     2, (hl)
                jp      LoadSmpsTracks
; ---------------------------------------------------------------------------

loc_1119:                               ; CODE XREF: PlaySoundID+B4↑j
                ld      de, $1EC6   ; SFX Track FM 3
                ld      hl, $1DA6   ; Music Track FM 3
                set     2, (hl)
                ld      hl, $1E06   ; Music Track FM 5
                set     2, (hl)
                ld      hl, $1E36   ; Music Track FM 6
                set     2, (hl)

LoadSmpsTracks:                         ; CODE XREF: PlaySoundID+4C↑j
                                        ; PlaySoundID+7D↑j ...
                ld      h, b
                ld      l, c
                ld      b, (hl)
                inc     hl

LoadTrack:                              ; CODE XREF: PlaySoundID+12A↓j
                push    bc
                push    hl
                pop     ix
                ldi
                ldi
                ldi
                ldi
                ldi
                ldi
                ldi
                ldi
                ldi
                ld      a, 30h
                ld      (de), a
                inc     de
                ld      a, 1
                ld      (de), a
                inc     de
                xor     a
                ld      (de), a
                inc     de
                ld      (de), a
                inc     de
                ld      (de), a
                push    hl
                ld      hl, 23h
                add     hl, de
                ex      de, hl
                pop     hl
                pop     bc
                djnz    LoadTrack

ClearSoundID:                           ; CODE XREF: RAM:01D7↑j
                                        ; SilenceAll+25↑j ...
                ld      a, 80h
                ld      ($1D03), a
                ret
; End of function PlaySoundID


; =============== S U B R O U T I N E =======================================


WritePSG:                               ; CODE XREF: DrumUpdateTrack+797↑p
                                        ; RAM:0C55↑p ...
                push    af
                xor     a               ; switch to Bank C00000
                ld      (6000h), a      ; Bank bits written: 180h
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      a, 1
                ld      (6000h), a
                ld      (6000h), a
                pop     af
                ld      (8011h), a      ; write to PSG (68k address C00011)
                push    af
                xor     a               ; switch to Bank 010000
                ld      (6000h), a      ; Bank bits written: 002h
                ld      a, 1
                ld      (6000h), a
                xor     a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                ld      (6000h), a
                pop     af
                ret
; End of function WritePSG


; =============== S U B R O U T I N E =======================================


ReadPtrTable_BC:                        ; CODE XREF: PlaySoundID+49↑p
                                        ; PlaySoundID+54↑p ...
                add     a, a
                ld      b, 0
                ld      c, a
                add     hl, bc
                ld      c, (hl)
                inc     hl
                ld      b, (hl)
                ret
; End of function ReadPtrTable_BC


; =============== S U B R O U T I N E =======================================


WaitForYM:                              ; CODE XREF: WriteFMI+5↑p
                                        ; WriteFMIIMain+A↑p
                push    hl
                pop     hl
                ret
; End of function WaitForYM

; ---------------------------------------------------------------------------

PlayDACVoice:                           ; DATA XREF: RAM:CmdPtrTable↓o
                ld      hl, DacSoundData
                ld      bc, 268h
                ld      a, 40h
                ld      ($1D0F), a
                push    af
                push    bc
                call    SilenceFMNotes
                pop     bc
                pop     af
                push    bc
                ld      a, 80h
                ld      c, 2Bh
                call    WriteFMIMain
                pop     bc
                ld      a, ($1D0F)

loc_11D2:                               ; CODE XREF: RAM:11E7↓j
                push    bc
                ld      b, a

loc_11D4:                               ; CODE XREF: RAM:loc_11D4↓j
                djnz    $
                pop     bc
                push    af
                push    bc
                ld      a, (hl)
                ld      c, 2Ah
                call    WriteFMIMain
                pop     bc
                inc     hl
                dec     bc
                ld      a, b
                or      c
                jr      z, loc_11E9
                pop     af
                jr      loc_11D2
; ---------------------------------------------------------------------------

loc_11E9:                               ; CODE XREF: RAM:11E4↑j
                pop     af
                xor     a
                ld      c, 2Bh
                call    WriteFMIMain
                jp      ClearSoundID
; ---------------------------------------------------------------------------
DacSoundData:   db 7Bh, 7Ah, 7Ch, 82h, 82h, 7Fh, 7Dh, 7Fh, 75h, 73h, 7Bh
                                        ; DATA XREF: RAM:PlayDACVoice↑o
                db 7Ah, 7Dh, 87h, 84h, 7Eh, 7Eh, 7Fh, 6Ch, 70h, 7Ch, 7Bh
                db 81h, 8Ch, 86h, 7Bh, 7Fh, 79h, 64h, 71h, 7Fh, 7Dh, 87h
                db 91h, 84h, 78h, 80h, 73h, 5Fh, 74h, 81h, 7Fh, 8Ch, 93h
                db 7Fh, 77h, 7Eh, 6Bh, 5Eh, 7Ah, 82h, 80h, 92h, 95h, 76h
                db 75h, 7Ah, 5Bh, 5Bh, 83h, 88h, 87h, 9Bh, 93h, 71h, 74h
                db 70h, 54h, 69h, 8Eh, 8Eh, 90h, 9Dh, 86h, 6Bh, 6Dh, 58h
                db 55h, 7Dh, 99h, 96h, 9Bh, 95h, 77h, 5Eh, 55h, 52h, 70h
                db 90h, 0A3h, 0A1h, 97h, 80h, 5Fh, 4Ch, 4Eh, 6Ch, 8Bh
                db 0A4h, 0AFh, 0A0h, 7Eh, 5Dh, 46h, 43h, 69h, 92h, 0ADh
                db 0B6h, 0A6h, 7Bh, 50h, 3Ah, 43h, 69h, 9Bh, 0BDh, 0BDh
                db 0A5h, 72h, 41h, 2Ch, 40h, 74h, 0A9h, 0C6h, 0C1h, 9Eh
                db 5Eh, 2Fh, 25h, 46h, 87h, 0C1h, 0D7h, 0C2h, 8Ch, 4Ah
                db 1Eh, 24h, 5Dh, 9Eh, 0CCh, 0D6h, 0BAh, 70h, 29h, 16h
                db 35h, 78h, 0C4h, 0E3h, 0CFh, 95h, 48h, 15h, 19h, 4Eh
                db 9Bh, 0D7h, 0E3h, 0C1h, 70h, 23h, 0Fh, 2Dh, 74h, 0C9h
                db 0F1h, 0D9h, 97h, 3Dh, 9, 16h, 50h, 0B1h, 0EDh, 0E6h
                db 0B5h, 56h, 0Eh, 0Bh, 3Dh, 8Eh, 0D9h, 0F1h, 0CEh, 7Ch
                db 23h, 0Ch, 29h, 6Fh, 0CBh, 0F7h, 0D6h, 83h, 33h, 14h
                db 27h, 61h, 0C2h, 0F2h, 0CCh, 7Fh, 3Fh, 1Fh, 2Eh, 6Ch
                db 0C3h, 0E3h, 0B0h, 67h, 3Dh, 2Fh, 45h, 89h, 0D0h, 0D2h
                db 92h, 54h, 39h, 36h, 57h, 0A7h, 0DDh, 0CBh, 88h, 4Ch
                db 25h, 23h, 63h, 0C2h, 0E9h, 0CEh, 8Eh, 40h, 0Ah, 14h
                db 57h, 0B8h, 0EBh, 0E1h, 0A4h, 45h, 10h, 17h, 47h, 0A5h
                db 0F4h, 0F0h, 0AFh, 5Ch, 22h, 17h, 3Fh, 95h, 0E7h, 0DCh
                db 99h, 5Dh, 34h, 2Bh, 5Ah, 0BBh, 0CFh, 81h, 4Ch, 54h
                db 5Bh, 82h, 0CCh, 0DAh, 88h, 21h, 11h, 39h, 7Ah, 0D7h
                db 0FFh, 0DEh, 80h, 20h, 0, 14h, 5Ah, 0D1h, 0FFh, 0E0h
                db 0A5h, 4Bh, 3, 0, 1Fh, 73h, 0DBh, 0F9h, 0D8h, 0A5h, 4Dh
                db 0Ch, 0Fh, 31h, 73h, 0D1h, 0FBh, 0E2h, 0B1h, 61h, 1Eh
                db 0Fh, 27h, 67h, 0C0h, 0EFh, 0E7h, 0BEh, 67h, 1Fh, 0Dh
                db 1Ch, 52h, 0BCh, 0FAh, 0ECh, 0BBh, 68h, 17h, 3, 1Ah
                db 56h, 0C1h, 0FDh, 0EBh, 0B9h, 67h, 1Bh, 0Dh, 1Fh, 54h
                db 0B7h, 0F7h, 0E7h, 0BAh, 77h, 27h, 11h, 1Dh, 47h, 9Ch
                db 0EBh, 0ECh, 0C5h, 8Bh, 3Ch, 1Ah, 1Ah, 38h, 89h, 0DAh
                db 0E9h, 0CBh, 9Ch, 4Eh, 1Eh, 1Ah, 2Dh, 65h, 0C6h, 0E9h
                db 0D4h, 0B5h, 73h, 31h, 1Ah, 1Ch, 43h, 99h, 0E5h, 0EEh
                db 0CCh, 8Ah, 3Bh, 17h, 15h, 34h, 88h, 0E0h, 0F3h, 0CFh
                db 97h, 47h, 19h, 18h, 31h, 70h, 0CFh, 0F0h, 0D1h, 0A1h
                db 5Eh, 2Eh, 29h, 2Dh, 50h, 0A0h, 0DDh, 0D5h, 0B9h, 91h
                db 4Eh, 28h, 26h, 36h, 69h, 0BCh, 0E2h, 0CFh, 0ABh, 77h
                db 3Fh, 2Ah, 25h, 41h, 8Ah, 0D4h, 0DEh, 0C8h, 9Ch, 57h
                db 25h, 1Eh, 2Ah, 5Bh, 0BBh, 0E9h, 0D3h, 0ADh, 7Ah, 36h
                db 20h, 27h, 42h, 89h, 0D5h, 0E2h, 0C2h, 98h, 61h, 32h
                db 2Bh, 32h, 57h, 0A6h, 0D9h, 0CEh, 0AFh, 91h, 59h, 33h
                db 2Fh, 37h, 5Fh, 0AEh, 0D9h, 0C9h, 0ACh, 86h, 4Dh, 33h
                db 31h, 36h, 63h, 0B9h, 0DEh, 0CDh, 0B2h, 8Ah, 44h, 23h
                db 27h, 3Ah, 74h, 0CCh, 0E9h, 0C5h, 9Dh, 71h, 38h, 26h
                db 31h, 48h, 89h, 0CEh, 0D9h, 0BAh, 97h, 6Dh, 40h, 37h
                db 3Dh, 49h, 89h, 0CDh, 0D1h, 0B3h, 97h, 73h, 45h, 41h
                db 43h, 40h, 6Fh, 0BDh, 0D4h, 0B4h, 9Ah, 7Ch, 4Ch, 43h
                db 49h, 40h, 5Ah, 0ACh, 0D4h, 0BEh, 0A0h, 88h, 5Ah, 41h
                db 46h, 3Eh, 4Fh, 9Bh, 0DAh, 0CBh, 9Ch, 87h, 68h, 48h
                db 48h, 45h, 45h, 7Ch, 0C8h, 0D2h, 0A6h, 8Dh, 7Bh, 56h
                db 4Eh, 50h, 43h, 58h, 0A9h, 0D3h, 0B5h, 92h, 86h, 60h
                db 49h, 55h, 4Ch, 44h, 80h, 0CEh, 0C9h, 99h, 8Fh, 7Fh
                db 52h, 4Dh, 5Dh, 4Ah, 4Eh, 9Bh, 0D4h, 0B6h, 8Dh, 8Eh
                db 73h, 4Ah, 58h, 61h, 47h, 58h, 0B1h, 0D2h, 9Fh, 87h
                db 89h, 63h, 4Eh, 69h, 65h, 42h, 63h, 0BBh, 0C4h, 8Fh
                db 88h, 8Bh, 62h, 56h, 76h, 64h, 3Dh, 60h, 0B5h, 0B9h
                db 8Fh, 8Fh, 91h, 67h, 5Dh, 80h, 80h
                db 0FFh
SndPriorities:  db 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h
                                        ; DATA XREF: DoOneSndQueue+6↑o
                db 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h
                db 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 00h, 10h
                db 10h, 20h, 00h, 20h, 20h, 40h, 60h, 50h, 70h, 50h, 50h
                db 10h, 40h, 70h, 70h, 60h, 40h, 40h, 40h, 70h, 60h, 40h
                db 40h, 70h, 40h, 60h, 70h, 30h, 50h, 70h, 70h, 70h, 68h
                db 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h
                db 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h
                db 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h
                db 80h
MusicTempoList: db 0, 0, 3, 0, 0, 0, 3, 3, 5, 0, 0, 0, 0, 3, 0
                                        ; DATA XREF: PlaySoundID+36↑o
SpcSFXPtrs:     dw $15D5, $1584, $1644, $1599
                                        ; DATA XREF: PlaySoundID:PlaySpcSFX↑o
SFXPtrs:        dw $1546, $1546, $1546, $1546, $1546
                                        ; DATA XREF: PlaySoundID+8E↑o
                dw $1546, $1546, $1546, $1546, $1546
                dw $1546, $1546, $1546, $1584, $1599
                dw $15AF, $15D5, $15EC, $160E, $1623
                dw $1644, $167B, $169A, $16B2, $16CE
                dw $16FD, $1718, $1744, $175C, $1776
                dw $178B, $17A9, $17D7, $180C, $185B
                dw $1878, $189A, $18CF, $18F5, $190C
                dw $192D, $1957, $1A0C, $1A49, $1A6F
                dw $1AB6, $1AEA, $1B2E, $1BC8, $1C1B
                dw $1C9D
CmdPtrTable:    dw FadeOutMusic, PlayDACVoice, StopAllSound, SilencePSG
                                        ; DATA XREF: PlaySoundID+22↑o
                db 0FFh
  		        db 3, 80h, 2, 1, 62h, 15h, 0, 0, 0, 0, 80h, 5, 1, 6Fh
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 15h, 0, 0, 0, 0, 80h, 6, 1, 79h, 15h, 0, 0, 0, 0, 0FEh
                db 0, 0, 0, 0, 0EFh, 33h, 0F8h, 0ACh, 1Ah, 80h, 12h, 0F2h
                db 0EFh, 33h, 80h, 4, 0F8h, 0ACh, 1Ah, 80h, 0Ah, 0F2h
                db 0EFh, 33h, 80h, 8, 0F8h, 0ACh, 1Ah, 0E5h, 80h, 2, 0F2h
  		        db 1, 0A0h, 6, 1, 8Eh, 15h, 0, 0, 0, 0, 0EFh, 1, 81h, 0F1h
                                        ; DATA XREF: RAM:SpcSFXPtrs↑o
                                        ; RAM:SFXPtrs↑o
                db 0Ah, 8, 80h, 0, 0, 20h, 0F2h
  		        db 2, 80h, 5, 1, 0ACh, 15h, 0, 0, 0, 0, 80h, 6, 1, 0ACh
                                        ; DATA XREF: RAM:SpcSFXPtrs↑o
                                        ; RAM:SFXPtrs↑o
                db 15h, 0, 0, 0, 0, 0EFh, 0Dh, 0F2h
  		        db 3, 80h, 2, 1, 0CBh, 15h, 0, 0, 0, 0, 80h, 5, 1, 0D0h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 15h, 0, 0, 0, 0, 80h, 6, 1, 0D0h, 15h, 0, 0, 0, 0, 0FEh
                db 0, 0, 0, 0, 0EFh, 0, 80h, 0Ah, 0F2h
  		        db 1, 0A0h, 6, 1, 0DFh, 15h, 0, 0, 0, 0, 0EFh, 1, 81h
                                        ; DATA XREF: RAM:SpcSFXPtrs↑o
                                        ; RAM:SFXPtrs↑o
                db 0F1h, 0Ah, 8, 80h, 0, 0, 20h, 0F6h, 0E1h, 15h
  		        db 2, 80h, 5, 1, 0FFh, 15h, 4, 0, 0, 0, 80h, 6, 1, 0FFh
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 15h, 5, 0, 0, 0, 0EFh, 3, 0A4h, 1, 88h, 2, 0EEh, 1
                db 8Eh, 3, 0EEh, 0, 80h, 8, 0F2h
  		        db 1, 0A0h, 6, 1, 18h, 16h, 0, 0, 0, 0, 0EFh, 2, 0A8h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 96h, 8Eh, 6, 80h, 0, 0, 8, 0F2h
  		        db 1, 0A0h, 6, 1, 2Dh, 16h, 10h, 0, 0, 0, 0EFh, 0Ch, 88h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0C7h, 53h, 2, 0EEh, 1, 0A7h, 3Dh, 57h, 2, 90h, 0AEh
                db 97h, 1, 0EEh, 0, 80h, 0, 0, 8, 0F2h
  		        db 2, 0A0h, 5, 1, 57h, 16h, 0, 0, 0, 0, 0A0h, 6, 1, 6Eh
                                        ; DATA XREF: RAM:SpcSFXPtrs↑o
                                        ; RAM:SFXPtrs↑o
                db 16h, 0, 0, 0, 0, 0EFh, 0Dh, 90h, 0F7h, 21h, 20h, 0EEh
                db 1, 0A4h, 0, 0FEh, 18h, 0A3h, 0, 0FDh, 14h, 0A2h, 0
                db 1, 30h, 0F6h, 5Dh, 16h, 0EFh, 0Dh, 80h, 0, 0, 8, 90h
                db 0F7h, 21h, 20h, 0F6h, 5Dh, 16h
  		        db 1, 0A0h, 6, 1, 85h, 16h, 0, 0, 0, 0, 0EFh, 0Fh, 94h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0, 2, 87h, 9Fh, 9Fh, 4, 0EEh, 1, 90h, 54h, 72h, 4
                db 80h, 0, 0, 20h, 0F2h
  		        db 1, 80h, 6, 1, 0A4h, 16h, 0, 0, 0, 0, 0EFh, 10h, 81h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 1, 0EEh, 1, 90h, 0A0h, 0B0h, 0EEh, 0, 80h, 10h, 0F2h
  		        db 1, 80h, 2, 1, 0BCh, 16h, 0, 0, 0, 0, 0FEh, 3, 3, 0
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 11h, 9Ch, 2, 81h, 2, 80h, 1, 9Ch, 4, 80h, 20h
                db 0F2h
  		        db 1, 0A0h, 2, 1, 0D8h, 16h, 0, 0, 0, 0, 0FEh, 3, 3, 0
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 9, 0A0h, 0, 0, 4, 0EEh, 1, 0A0h, 0E7h, 0ADh
                db 3, 0A6h, 28h, 0DDh, 2, 0FBh, 1, 0F7h, 0, 10h, 0E5h
                db 16h, 0FBh, 0F0h, 0EEh, 0, 80h, 0, 0, 40h, 0F2h
  		        db 1, 80h, 2, 1, 7, 17h, 0, 0, 0, 0, 0FEh, 3, 3, 0, 0
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0EFh, 13h, 0B0h, 4, 0F7h, 0, 0Fh, 0Eh, 17h, 80h, 40h
                db 0F2h
  		        db 3, 0A0h, 2, 1, 34h, 17h, 0, 0, 0, 0, 0A0h, 5, 1, 39h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 17h, 0, 0, 0, 0, 0A0h, 5, 1, 39h, 17h, 0, 0, 0, 0, 0FEh
                db 3, 3, 0, 0, 0EFh, 15h, 84h, 1, 0, 30h, 80h, 0, 0, 40h
                db 0F2h
  		        db 1, 80h, 2, 1, 4Eh, 17h, 0F8h, 0, 0, 0, 0FEh, 0, 3, 3
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 16h, 98h, 1, 8Ch, 1, 90h, 4, 0F2h
  		        db 1, 0A0h, 2, 1, 66h, 17h, 0, 0, 0, 0, 0FEh, 0, 0, 3
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 17h, 82h, 0CBh, 0A3h, 4, 80h, 0, 0, 40h, 0F2h
  		        db 1, 80h, 6, 1, 80h, 17h, 0, 0, 0, 0, 0EFh, 1Ah, 81h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 3, 83h, 4, 81h, 3, 80h, 10h, 0F2h
  		        db 1, 0A0h, 2, 1, 95h, 17h, 0, 0, 0, 0, 0FEh, 0, 3, 3
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 1Dh, 0A2h, 0ECh, 96h, 4, 0ABh, 0E9h, 0BFh
                db 4, 80h, 0, 0, 40h, 0F2h
  		        db 3, 80h, 2, 1, 0C5h, 17h, 0, 0, 0, 0, 80h, 5, 1, 0CAh
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 17h, 0, 0, 0, 0, 80h, 6, 1, 0CAh, 17h, 0, 0, 0, 0, 0FEh
                db 0, 0, 0, 1, 0EFh, 6, 0B0h, 60h, 0EEh, 1, 80h, 40h, 0EEh
                db 0, 80h, 40h, 0F2h
  		        db 3, 0A0h, 2, 1, 0F3h, 17h, 0, 0, 0, 8, 0A0h, 5, 1, 0F8h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 17h, 0, 0, 0, 8, 0A0h, 6, 1, 0F8h, 17h, 0, 0, 0, 8
                db 0FEh, 0, 0, 3, 0, 0EFh, 21h, 81h, 0F8h, 5, 8, 0EEh
                db 1, 0F7h, 0, 20h, 0FAh, 17h, 0EEh, 0, 80h, 0, 0, 1, 0F2h
  		        db 2, 0A0h, 5, 1, 1Fh, 18h, 3, 0, 0, 0, 0A0h, 6, 1, 3Ah
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 18h, 9, 0, 0, 0, 0EFh, 29h, 8Dh, 0, 0, 3, 80h, 0, 0
                db 1, 8Dh, 0, 0, 8, 0EEh, 1, 8Eh, 0D6h, 66h, 6, 0EEh, 0
                db 80h, 0, 0, 20h, 0F2h, 0EFh, 2Ah, 8Eh, 0, 0, 3, 80h
                db 0, 0, 1, 0EFh, 29h, 80h, 0, 0, 4, 99h, 0, 0, 8, 0EEh
                db 1, 99h, 0EFh, 4Eh, 8, 0EEh, 0, 80h, 0, 0, 38h, 0F2h
  		        db 1, 0A0h, 6, 1, 65h, 18h, 0, 0, 0, 0, 0EFh, 27h, 9Eh
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 47h, 23h, 4, 0EEh, 1, 8Eh, 0, 0, 20h, 0EEh, 0, 80h
                db 0, 0, 8, 0F2h
  		        db 1, 0A0h, 6, 1, 82h, 18h, 0, 0, 0, 0, 0EFh, 22h, 8Fh
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0B4h, 0CDh, 4, 0EEh, 1, 9Bh, 1Fh, 92h, 4, 0F7h, 0, 8
                db 84h, 18h, 0EEh, 0, 80h, 0, 0, 8, 0F2h
  		        db 3, 0A0h, 2, 1, 0B6h, 18h, 0, 0, 0, 0, 0A0h, 5, 1, 0BBh
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 18h, 0, 0, 0, 0, 0A0h, 6, 1, 0BBh, 18h, 0, 0, 0, 0
                db 0FEh, 0, 0, 3, 0, 0EFh, 26h, 0ABh, 0F8h, 91h, 8, 0EEh
                db 1, 0F7h, 0, 8, 0BDh, 18h, 0EEh, 0, 80h, 0, 0, 8, 0F2h
  		        db 1, 0A0h, 2, 1, 0D9h, 18h, 0, 0, 0, 0, 0FEh, 0, 0, 3
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 28h, 0C5h, 22h, 0A1h, 2, 0EEh, 1, 0B4h, 0F5h
                db 1Fh, 4, 0C5h, 0, 0, 1, 0EEh, 0, 80h, 0, 0, 20h, 0F2h
  		        db 1, 80h, 6, 1, 0FFh, 18h, 0, 0, 0, 0, 0EFh, 2Bh, 94h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 4, 80h, 1, 90h, 1, 98h, 1, 80h, 4, 0F2h
  		        db 1, 0A0h, 6, 1, 16h, 19h, 0, 0, 0, 0, 0EFh, 2Ch, 0C1h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0DBh, 2Dh, 4, 0EEh, 1, 88h, 0Bh, 0F4h, 10h, 84h, 23h
                db 0E6h, 4, 0EEh, 0, 80h, 0, 0, 20h, 0F2h
  		        db 2, 80h, 5, 1, 40h, 19h, 2, 0, 0, 0, 80h, 6, 1, 40h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 19h, 2, 0, 0, 0, 0EFh, 2Dh, 0BCh, 1, 0FCh, 1, 9Ch, 38h
                db 46h, 1, 0EEh, 1, 0A0h, 49h, 50h, 8, 0FCh, 0, 0EEh, 0
                db 80h, 20h, 0F2h
  		        db 3, 80h, 2, 1, 73h, 19h, 0, 0, 0, 3, 80h, 5, 1, 3, 1Ah
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0, 0, 3, 80h, 6, 1, 78h, 19h, 0FFh, 0, 0, 3, 0FEh
                db 3, 3, 0, 0, 0EFh, 2Fh, 0FCh, 1, 0ABh, 15h, 0A8h, 10h
                db 0EEh, 1, 91h, 1Eh, 0D4h, 10h, 91h, 10h, 0E4h, 4, 8Fh
                db 0, 0, 8, 8Fh, 0F0h, 1Ch, 4, 0F7h, 0, 2, 86h, 19h, 91h
                db 0F2h, 1Fh, 4, 93h, 0, 0, 8, 93h, 0Eh, 0E1h, 4, 92h
                db 0F2h, 21h, 4, 94h, 0, 0, 8, 94h, 0Eh, 0DFh, 4, 93h
                db 0F3h, 23h, 4, 95h, 0, 0, 8, 95h, 0Dh, 0DDh, 4, 94h
                db 0F4h, 25h, 4, 96h, 0, 0, 8, 96h, 0Ch, 0DBh, 4, 95h
                db 0F4h, 28h, 4, 97h, 0, 0, 8, 97h, 0Ch, 0D8h, 4, 0F7h
                db 0, 4, 0C7h, 19h, 93h, 0Eh, 0E1h, 4, 91h, 0, 0, 8, 8Fh
                db 0F0h, 1Ch, 4, 91h, 10h, 0E4h, 4, 8Fh, 0, 0, 8, 8Fh
                db 0F0h, 1Ch, 4, 91h, 10h, 0E4h, 4, 8Fh, 0, 0, 8, 8Fh
                db 0F0h, 1Ch, 4, 0EEh, 0, 80h, 0, 0, 30h, 0F2h, 0EFh, 2Fh
                db 0F0h, 0Ch, 80h, 8, 0F6h, 7Ah, 19h
  		        db 1, 0A0h, 6, 1, 16h, 1Ah, 0, 0, 0, 0, 0EFh, 30h, 0B8h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 9Ch, 4Dh, 2, 0B1h, 6Bh, 8Fh, 2, 0ADh, 0CDh, 7Eh, 2
                db 0A9h, 49h, 2, 2, 0A6h, 1Dh, 0AAh, 2, 0A2h, 17h, 67h
                db 1, 9Eh, 0EFh, 3Dh, 1, 9Bh, 3Ah, 6, 1, 97h, 0FFh, 0D8h
                db 1, 93h, 0B4h, 0BBh, 1, 90h, 0FCh, 56h, 2, 80h, 0, 0
                db 5, 0F2h
  		        db 1, 0A0h, 2, 1, 53h, 1Ah, 0, 0, 0, 0, 0FEh, 3, 3, 0
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 31h, 83h, 0, 0, 2, 90h, 32h, 0ABh, 6, 0EEh
                db 1, 88h, 64h, 59h, 1, 0EEh, 0, 80h, 0, 0, 10h, 0F2h
  		        db 3, 80h, 2, 1, 8Bh, 1Ah, 0, 0, 0, 0, 80h, 5, 1, 98h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 1Ah, 0, 0, 0, 0, 80h, 6, 1, 0A2h, 1Ah, 0, 0, 0, 0, 0FEh
                db 0, 0, 0, 0, 0EFh, 33h, 0F8h, 0ACh, 1Ah, 80h, 30h, 0F2h
                db 0EFh, 33h, 80h, 4, 0F8h, 0ACh, 1Ah, 80h, 28h, 0F2h
                db 0EFh, 33h, 80h, 8, 0F8h, 0ACh, 1Ah, 80h, 20h, 0F2h
                db 0C2h, 6, 0C4h, 0C6h, 0C8h, 0CAh, 0CCh, 0CEh, 0D0h, 0F9h
  		        db 1, 80h, 2, 1, 0C0h, 1Ah, 0, 0, 0, 0, 0FEh, 3, 3, 0
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 34h, 0FBh, 0F4h, 0FCh, 1, 85h, 0FCh, 0CFh
                db 4, 0A2h, 0E6h, 66h, 6, 0ABh, 0DBh, 0FBh, 5, 0FCh, 0
                db 80h, 20h, 0FBh, 18h, 0EFh, 35h, 0FCh, 1, 0C8h, 0Bh
                db 86h, 14h, 0FCh, 0, 80h, 20h, 0F2h
  		        db 1, 80h, 2, 1, 0F4h, 1Ah, 0, 0, 0, 0, 0FEh, 3, 3, 0
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 0, 0EFh, 38h, 0A0h, 2, 0FCh, 1, 0EEh, 1, 9Dh, 0E3h
                db 0A1h, 3, 0A3h, 30h, 0ECh, 2, 0EEh, 0, 0F7h, 0, 3, 0FBh
                db 1Ah, 0FCh, 0, 0A0h, 4, 0FCh, 1, 0EEh, 1, 9Dh, 0E3h
                db 0A1h, 3, 0A3h, 30h, 0ECh, 2, 0FBh, 1, 0F7h, 0, 10h
                db 18h, 1Bh, 0FBh, 0F0h, 0FCh, 0, 80h, 40h, 0F2h
  		        db 3, 80h, 2, 1, 4Ah, 1Bh, 0F4h, 0, 0, 4, 80h, 5, 1, 94h
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 1Bh, 0F4h, 0, 0, 4, 80h, 6, 1, 0A8h, 1Bh, 0F5h, 0, 0
                db 4, 0FEh, 2, 3, 3, 0, 0EFh, 39h, 0F0h, 0, 90h, 4, 8Fh
                db 8Eh, 0F7h, 0, 2, 51h, 1Bh, 0F0h, 2, 90h, 4, 8Fh, 8Eh
                db 0F7h, 0, 2, 5Eh, 1Bh, 0F0h, 4, 90h, 3, 8Fh, 8Eh, 0F7h
                db 0, 3, 69h, 1Bh, 0F0h, 8, 90h, 3, 8Fh, 8Eh, 0F7h, 0
                db 3, 74h, 1Bh, 0F0h, 0Ah, 90h, 2, 8Fh, 8Eh, 0F7h, 0, 0Ch
                db 7Fh, 1Bh, 0F0h, 20h, 90h, 1, 8Fh, 8Eh, 0F7h, 0, 0Ch
                db 8Ah, 1Bh, 0F2h, 0EFh, 3Ah, 0BDh, 2, 80h, 1, 0B7h, 2
                db 80h, 1, 0F7h, 0, 8, 96h, 1Bh, 93h, 70h, 80h, 40h, 0F2h
                db 0EFh, 3Bh, 0E9h, 0Dh, 0EAh, 7, 0C0h, 4, 80h, 90h, 80h
                db 0BDh, 4, 80h, 2, 0FCh, 1, 0BDh, 0Fh, 0B1h, 20h, 0FCh
                db 0, 0EEh, 1, 8Dh, 60h, 0EEh, 0, 80h, 40h, 0F2h
  		        db 3, 80h, 2, 1, 0E4h, 1Bh, 0F4h, 0, 0, 4, 80h, 5, 1, 0FDh
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 1Bh, 0F4h, 0, 0, 4, 80h, 6, 1, 8, 1Ch, 0F5h, 0, 0, 4
                db 0FEh, 3, 2, 1, 0, 0EFh, 3Ch, 90h, 2, 0EEh, 1, 8Fh, 90h
                db 2, 8Fh, 0F7h, 0, 0Ch, 0F0h, 1Bh, 0EEh, 0, 80h, 4, 0F2h
                db 0EFh, 3Dh, 0A8h, 8, 80h, 4, 96h, 14h, 80h, 20h, 0F2h
                db 0EFh, 3Eh, 0FCh, 1, 8Dh, 0E9h, 68h, 0Ch, 0FCh, 0, 0EEh
                db 1, 8Eh, 18h, 0EEh, 0, 80h, 10h, 0F2h
  		        db 3, 0A0h, 2, 1, 37h, 1Ch, 0F8h, 0, 0, 0, 80h, 5, 1, 6Eh
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 1Ch, 0F1h, 0, 0, 0, 80h, 6, 1, 6Ch, 1Ch, 0F8h, 2, 0
                db 0, 0FEh, 2, 3, 3, 0, 0EFh, 1Eh, 0EFh, 1Eh, 87h, 0, 0
                db 3, 80h, 0, 0, 3, 93h, 1Eh, 0CDh, 6, 80h, 0, 0, 3, 0F7h
                db 0, 10h, 3Eh, 1Ch, 0FEh, 2, 3, 1, 1, 0EFh, 37h, 8Dh
                db 0E8h, 50h, 3, 0E6h, 1, 0F7h, 0, 14h, 55h, 1Ch, 80h
                db 0, 0, 10h, 0F2h, 80h, 0Ah, 0EFh, 1Fh, 0A5h, 3, 0EEh
                db 1, 0B7h, 1, 0EEh, 0, 80h, 2, 0FCh, 1, 0A5h, 0Ah, 0BFh
                db 8, 0FCh, 0, 80h, 4, 0F7h, 0, 12h, 6Eh, 1Ch, 0FCh, 1
                db 0A5h, 2, 0F1h, 18h, 0EEh, 1, 0F7h, 0, 6, 89h, 1Ch, 0FCh
                db 0, 0EEh, 0, 80h, 20h, 0F2h
                db 1, 80h, 2, 1, 0A7h, 1Ch, 0F8h, 0, 0, 0, 0FEh, 2, 3
                                        ; DATA XREF: RAM:SFXPtrs↑o
                db 1, 1, 0EFh, 3Fh, 0FCh, 1, 8Dh, 0E8h, 50h, 0Ch, 0F2h
                db 0

